[{"path":[]},{"path":"https://ccbr.github.io/MOSuite/CONTRIBUTING.html","id":"proposing-changes-with-issues","dir":"","previous_headings":"","what":"Proposing changes with issues","title":"Contributing to MOSuite","text":"want make change, ’s good idea first open issue make sure someone team agrees ’s needed. ’ve decided work issue, assign issue others know ’re working .","code":""},{"path":"https://ccbr.github.io/MOSuite/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"Contributing to MOSuite","text":"use GitHub Flow collaboration process. Follow steps detailed instructions contributing changes MOSuite.","code":""},{"path":"https://ccbr.github.io/MOSuite/CONTRIBUTING.html","id":"clone-the-repo","dir":"","previous_headings":"Pull request process","what":"Clone the repo","title":"Contributing to MOSuite","text":"member CCBR, can clone repository computer development environment. Otherwise, first need fork repo clone fork. need step . Cloning ‘MOSuite’…  remote: Enumerating objects: 1136, done.  remote: Counting objects: 100% (463/463), done.  remote: Compressing objects: 100% (357/357), done.  remote: Total 1136 (delta 149), reused 332 (delta 103), pack-reused 673  Receiving objects: 100% (1136/1136), 11.01 MiB | 9.76 MiB/s, done.  Resolving deltas: 100% (530/530), done.","code":"git clone https://github.com/CCBR/MOSuite cd MOSuite"},{"path":"https://ccbr.github.io/MOSuite/CONTRIBUTING.html","id":"if-this-is-your-first-time-cloning-the-repo-install-dependencies","dir":"","previous_headings":"Pull request process","what":"If this is your first time cloning the repo, install dependencies","title":"Contributing to MOSuite","text":"R console, install R development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Install pre-commit don’t already . repo’s root directory, run install repo’s pre-commit hooks. ’ll need step first time clone repo.","code":"pre-commit install"},{"path":"https://ccbr.github.io/MOSuite/CONTRIBUTING.html","id":"create-a-branch","dir":"","previous_headings":"Pull request process","what":"Create a branch","title":"Contributing to MOSuite","text":"Create Git branch pull request (PR). Give branch descriptive name changes make, iss-10 specific issue. Switched new branch ‘iss-10’","code":"# create a new branch and switch to it git branch iss-10 git switch iss-10"},{"path":"https://ccbr.github.io/MOSuite/CONTRIBUTING.html","id":"make-your-changes","dir":"","previous_headings":"Pull request process","what":"Make your changes","title":"Contributing to MOSuite","text":"Edit code, write unit tests, update documentation needed.","code":""},{"path":"https://ccbr.github.io/MOSuite/CONTRIBUTING.html","id":"style","dir":"","previous_headings":"Pull request process > Make your changes","what":"style","title":"Contributing to MOSuite","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. brief overview conventions according tidyverse style guide: object names (variables functions) snake_case function names use verbs possible use <- assignment use pipes chain operations single object Please see tidyverse style guide details.","code":""},{"path":"https://ccbr.github.io/MOSuite/CONTRIBUTING.html","id":"test","dir":"","previous_headings":"Pull request process > Make your changes","what":"test","title":"Contributing to MOSuite","text":"changes code also need unit tests demonstrate changes work intended. Use testthat create unit tests test code. Test files organized described https://style.tidyverse.org/tests.html. Take look existing code package examples.","code":""},{"path":"https://ccbr.github.io/MOSuite/CONTRIBUTING.html","id":"document","dir":"","previous_headings":"Pull request process > Make your changes","what":"document","title":"Contributing to MOSuite","text":"written new function changed API existing function, need update function’s documentation using roxygen2 Markdown syntax. See instructions writing roxygen2 comments : https://r-pkgs.org/man.html. function used vignette, may also need update vignette.","code":""},{"path":"https://ccbr.github.io/MOSuite/CONTRIBUTING.html","id":"check","dir":"","previous_headings":"Pull request process > Make your changes","what":"check","title":"Contributing to MOSuite","text":"making changes, run devtools::check() R console make sure package still passes R CMD check.","code":""},{"path":"https://ccbr.github.io/MOSuite/CONTRIBUTING.html","id":"commit-and-push-your-changes","dir":"","previous_headings":"Pull request process","what":"Commit and push your changes","title":"Contributing to MOSuite","text":"’re sure often commit commits consist , recommend following “atomic commits” principle commit contains one new feature, fix, task. Learn atomic commits : https://www.freshconsulting.com/insights/blog/atomic-commits/ First, add files changed staging area: make commit. commit message follow Conventional Commits specification. Briefly, commit start one approved types feat, fix, docs, etc. followed description commit. Take look Conventional Commits specification detailed information write commit messages. pre-commit enforce commit message code changes styled correctly attempt make corrections needed. Check added large files……………………………………….Passed  Fix End Files…………………………………………………Passed  Trim Trailing Whitespace………………………………………….Failed  - hook id: trailing-whitespace  - exit code: 1  - files modified hook  Fixing path//changed/files/file.txt  codespell……………………………………………………….Passed  style-files……………………………………(files check)Skipped  readme-rmd-rendered…………………………….(files check)Skipped  use-tidy-description……………………………(files check)Skipped example , one hooks modified file proposed commit, pre-commit check failed. can run git diff see changes pre-commit made git status see files modified. proceed commit, re-add modified file(s) re-run commit command: time, hooks either passed skipped (e.g. hooks run R code run R files committed). pre-commit check successful, usual commit success message appear pre-commit messages showing commit created. Check added large files……………………………………….Passed  Fix End Files…………………………………………………Passed  Trim Trailing Whitespace………………………………………….Passed  codespell……………………………………………………….Passed  style-files……………………………………(files check)Skipped  readme-rmd-rendered…………………………….(files check)Skipped  use-tidy-description……………………………(files check)Skipped  Conventional Commit………………………………………………Passed  [iss-10 9ff256e] feat: create function awesome feature  1 file changed, 22 insertions(+), 3 deletions(-) Finally, push changes GitHub: first time pushing branch, may explicitly set upstream branch: Enumerating objects: 7, done.  Counting objects: 100% (7/7), done.  Delta compression using 10 threads  Compressing objects: 100% (4/4), done.  Writing objects: 100% (4/4), 648 bytes | 648.00 KiB/s, done.  Total 4 (delta 3), reused 0 (delta 0), pack-reused 0  remote: Resolving deltas: 100% (3/3), completed 3 local objects.  remote:  remote: Create pull request ‘iss-10’ GitHub visiting:  remote: https://github.com/CCBR/MOSuite/pull/new/iss-10  remote:  https://github.com/CCBR/MOSuite  [new branch] iss-10 -> iss-10  branch ‘iss-10’ set track ‘origin/iss-10’. recommend pushing commits often backed GitHub. can view files branch GitHub https://github.com/CCBR/MOSuite/tree/<-branch-name> (replace <-branch-name> actual name branch).","code":"git add path/to/changed/files/ git commit -m 'feat: create function for awesome feature' git add path/to/changed/files/file.txt git commit -m 'feat: create function for awesome feature' git push git push --set-upstream origin iss-10"},{"path":"https://ccbr.github.io/MOSuite/CONTRIBUTING.html","id":"create-the-pr","dir":"","previous_headings":"Pull request process","what":"Create the PR","title":"Contributing to MOSuite","text":"branch ready, create PR GitHub: https://github.com/CCBR/MOSuite/pull/new/ Select branch just pushed: Edit PR title description. title briefly describe change. Follow comments template fill body PR, can delete comments (everything <!-- -->) go. ’re ready, click ‘Create pull request’ open . Optionally, can mark PR draft ’re yet ready reviewed, change later ’re ready.","code":""},{"path":"https://ccbr.github.io/MOSuite/CONTRIBUTING.html","id":"wait-for-a-maintainer-to-review-your-pr","dir":"","previous_headings":"Pull request process","what":"Wait for a maintainer to review your PR","title":"Contributing to MOSuite","text":"best follow tidyverse code review principles: https://code-review.tidyverse.org/. reviewer may suggest make changes accepting PR order improve code quality style. ’s case, continue make changes branch push GitHub, appear PR. PR approved, maintainer merge issue(s) PR links close automatically. Congratulations thank contribution!","code":""},{"path":"https://ccbr.github.io/MOSuite/CONTRIBUTING.html","id":"after-your-pr-has-been-merged","dir":"","previous_headings":"Pull request process","what":"After your PR has been merged","title":"Contributing to MOSuite","text":"PR merged, update local clone repo switching main branch pulling latest changes: ’s good idea run git pull creating new branch start recent commits main.","code":"git checkout main git pull"},{"path":"https://ccbr.github.io/MOSuite/CONTRIBUTING.html","id":"helpful-links-for-more-information","dir":"","previous_headings":"","what":"Helpful links for more information","title":"Contributing to MOSuite","text":"contributing guide adapted tidyverse contributing guide GitHub Flow tidyverse style guide tidyverse code review principles reproducible examples R packages book usethis devtools testthat styler roxygen2","code":""},{"path":"https://ccbr.github.io/MOSuite/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 CCR Collaborative Bioinformatics Resource Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":[]},{"path":"https://ccbr.github.io/MOSuite/PULL_REQUEST_TEMPLATE.html","id":"pr-checklist","dir":"","previous_headings":"","what":"PR Checklist","title":"NA","text":"(Strikethrough points applicable.) comment contains description changes justifications, relevant issues linked. Write unit tests new features, bug fixes, code changes. Update docs API changes (roxygen2 comments, vignettes, readme, etc.). Update NEWS.md short description user-facing changes reference PR number. Follow style described https://style.tidyverse.org/news.html Run devtools::check() locally fix notes, warnings, errors.","code":""},{"path":"https://ccbr.github.io/MOSuite/articles/intro.html","id":"renee-dataset","dir":"Articles","previous_headings":"","what":"RENEE dataset","title":"Introduction to MultiOmicsSuite","text":"","code":"# replace these lines with the actual paths to your files gene_counts_tsv <- system.file(\"extdata\",   \"RSEM.genes.expected_count.all_samples.txt.gz\",   package = \"MOSuite\" ) metadata_tsv <- system.file(\"extdata\", \"sample_metadata.tsv.gz\",   package = \"MOSuite\" )  # create multi-omic object moo <- create_multiOmicDataSet_from_files(   sample_meta_filepath = metadata_tsv,   feature_counts_filepath = gene_counts_tsv ) #> Rows: 58929 Columns: 6 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (2): gene_id, GeneName #> dbl (4): KO_S3, KO_S4, WT_S1, WT_S2 #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 4 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (2): sample_id, condition #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.  head(moo@counts$raw) #> # A tibble: 6 × 5 #>   gene_id            KO_S3 KO_S4 WT_S1 WT_S2 #>   <chr>              <dbl> <dbl> <dbl> <dbl> #> 1 ENSG00000121410.11     0     0     0     0 #> 2 ENSG00000268895.5      0     0     0     0 #> 3 ENSG00000148584.15     0     0     0     0 #> 4 ENSG00000175899.14     0     0     0     0 #> 5 ENSG00000245105.3      0     0     0     0 #> 6 ENSG00000166535.20     0     0     0     0 head(moo@sample_meta) #> # A tibble: 4 × 2 #>   sample_id condition #>   <chr>     <chr>     #> 1 KO_S3     knockout  #> 2 KO_S4     knockout  #> 3 WT_S1     wildtype  #> 4 WT_S2     wildtype head(moo@annotation) #> # A tibble: 6 × 2 #>   gene_id            GeneName #>   <chr>              <chr>    #> 1 ENSG00000121410.11 A1BG     #> 2 ENSG00000268895.5  A1BG-AS1 #> 3 ENSG00000148584.15 A1CF     #> 4 ENSG00000175899.14 A2M      #> 5 ENSG00000245105.3  A2M-AS1  #> 6 ENSG00000166535.20 A2ML1 moo %<>%   clean_raw_counts() %>%   filter_counts(     group_colname = \"condition\",     label_colname = \"sample_id\",     minimum_count_value_to_be_considered_nonzero = 1,     minimum_number_of_samples_with_nonzero_counts_in_total = 1,     minimum_number_of_samples_with_nonzero_counts_in_a_group = 1,   ) %>%   normalize_counts(     group_colname = \"condition\",     label_colname = \"sample_id\"   ) #> * normalizing filt counts #> * filtering clean counts #> * cleaning raw counts #> Not able to identify multiple id's in gene_id #> Columns that can be used to aggregate gene information gene_id #> Aggregating the counts for the same ID in different chromosome locations. #> Column used to Aggregate duplicate IDs: gene_id #> Number of rows before Collapse: 58929 #> no duplicated IDs in gene_id #> Number of features after filtering: 291 #> Total number of features included: 291 #> Sample columns: KO_S3, Sample columns: KO_S4, Sample columns: WT_S1, Sample columns: WT_S2  moo@counts$norm$voom %>% head() #>              gene_id     KO_S3     KO_S4     WT_S1     WT_S2 #> 1  ENSG00000215458.8 11.075196 12.348091  8.816153 10.004874 #> 2 ENSG00000160179.18  9.608634 12.770317 12.348091 12.236996 #> 3  ENSG00000258017.1  9.608634  8.816153  8.816153  8.816153 #> 4  ENSG00000282393.1  8.816153  9.608634  8.816153  8.816153 #> 5  ENSG00000286104.1  9.608634  8.816153  8.816153  8.816153 #> 6  ENSG00000274422.1  8.816153  9.608634  8.816153  8.816153"},{"path":"https://ccbr.github.io/MOSuite/articles/intro.html","id":"nidap-dataset","dir":"Articles","previous_headings":"","what":"NIDAP dataset","title":"Introduction to MultiOmicsSuite","text":"","code":"options(moo_print_plots = TRUE)  moo_nidap <- create_multiOmicDataSet_from_dataframes(   sample_metadata = as.data.frame(nidap_sample_metadata),   counts_dat = as.data.frame(nidap_raw_counts) ) %>%   clean_raw_counts() %>%   filter_counts(group_colname = \"Group\") %>%   normalize_counts(group_colname = \"Group\") %>%   batch_correct_counts(     covariates_colname = \"Group\",     batch_colname = \"Batch\",     label_colname = \"Label\"   ) #> * batch-correcting norm-voom counts #> * normalizing filt counts #> * filtering clean counts #> * cleaning raw counts #> Not able to identify multiple id's in GeneName #> Columns that can be used to aggregate gene information GeneName #> Aggregating the counts for the same ID in different chromosome locations. #> Column used to Aggregate duplicate IDs: GeneName #> Number of rows before Collapse: 43280 #> no duplicated IDs in GeneName #> Number of features after filtering: 7943 #> Total number of features included: 7943 #> Warning: ggrepel: 1 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps #> Sample columns: A1, Sample columns: A2, Sample columns: A3, Sample columns: B1, Sample columns: B2, Sample columns: B3, Sample columns: C1, Sample columns: C2, Sample columns: C3 #> Found2batches #> Adjusting for2covariate(s) or covariate level(s) #> Standardizing Data across genes #> Fitting L/S model and finding priors #> Finding parametric adjustments #> Adjusting the Data #> The total number of features in output: 7943 #> Number of samples after batch correction: 10"},{"path":"https://ccbr.github.io/MOSuite/articles/visualization.html","id":"default-plots-from-each-step","dir":"Articles","previous_headings":"","what":"Default plots from each step","title":"Visualization with built-in plots","text":"Default plots can printed screen /saved disk. See ?MOSuite::options information.","code":"# set options to print & save the plots options(moo_print_plots = TRUE) options(moo_save_plots = TRUE) # when moo_save_plots is TRUE, plots are saved to this directory: options(moo_plots_dir = \"./figures\")"},{"path":"https://ccbr.github.io/MOSuite/articles/visualization.html","id":"clean","dir":"Articles","previous_headings":"Default plots from each step","what":"clean","title":"Visualization with built-in plots","text":"","code":"moo <- create_multiOmicDataSet_from_dataframes(   sample_metadata = as.data.frame(nidap_sample_metadata),   counts_dat = as.data.frame(nidap_raw_counts) ) %>%   clean_raw_counts() #> * cleaning raw counts #> Saving 5 x 4 in image #> Not able to identify multiple id's in GeneName #> Columns that can be used to aggregate gene information GeneName #> Aggregating the counts for the same ID in different chromosome locations. #> Column used to Aggregate duplicate IDs: GeneName #> Number of rows before Collapse: 43280 #> no duplicated IDs in GeneName moo %<>%   filter_counts(group_colname = \"Group\") #> * filtering clean counts #> Number of features after filtering: 7943 #> Warning: ggrepel: 1 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps #> Saving 5 x 4 in image #> Warning: ggrepel: 1 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps #> Saving 5 x 4 in image"},{"path":"https://ccbr.github.io/MOSuite/articles/visualization.html","id":"normalize","dir":"Articles","previous_headings":"Default plots from each step","what":"normalize","title":"Visualization with built-in plots","text":"","code":"moo %<>%   normalize_counts(group_colname = \"Group\") #> * normalizing filt counts #> Total number of features included: 7943 #> Warning: ggrepel: 3 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps #> Saving 5 x 4 in image #> Warning: ggrepel: 3 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps #> Saving 5 x 4 in image #> Sample columns: A1, Sample columns: A2, Sample columns: A3, Sample columns: B1, Sample columns: B2, Sample columns: B3, Sample columns: C1, Sample columns: C2, Sample columns: C3"},{"path":"https://ccbr.github.io/MOSuite/articles/visualization.html","id":"batch-correct","dir":"Articles","previous_headings":"Default plots from each step","what":"batch correct","title":"Visualization with built-in plots","text":"","code":"moo %<>% batch_correct_counts(   covariates_colname = \"Group\",   batch_colname = \"Batch\",   label_colname = \"Label\" ) #> * batch-correcting norm-voom counts #> Found2batches #> Adjusting for2covariate(s) or covariate level(s) #> Standardizing Data across genes #> Fitting L/S model and finding priors #> Finding parametric adjustments #> Adjusting the Data #> Saving 5 x 4 in image #> Saving 5 x 4 in image #> The total number of features in output: 7943 #> Number of samples after batch correction: 10"},{"path":"https://ccbr.github.io/MOSuite/articles/visualization.html","id":"customize-plots","dir":"Articles","previous_headings":"","what":"Customize plots","title":"Visualization with built-in plots","text":"TODO - show use individual plotting functions - customize & override default color palettes - customize ggplot objects","code":""},{"path":"https://ccbr.github.io/MOSuite/articles/visualization.html","id":"d-pca","dir":"Articles","previous_headings":"Customize plots","what":"3D PCA","title":"Visualization with built-in plots","text":"","code":"plot_pca_3d(moo@counts$batch,   moo@sample_meta,   group_colname = \"Group\",   label_colname = \"Label\",   color_values = moo@analyses[[\"colors\"]][[\"Group\"]] )"},{"path":"https://ccbr.github.io/MOSuite/articles/visualization.html","id":"expression-heatmap","dir":"Articles","previous_headings":"","what":"Expression Heatmap","title":"Visualization with built-in plots","text":"","code":"p <- plot_expr_heatmap(moo, count_type = \"norm\", sub_count_type = \"voom\") #> Warning: `arrange_()` was deprecated in dplyr 0.7.0. #> ℹ Please use `arrange()` instead. #> ℹ See vignette('programming') for more help #> ℹ The deprecated feature was likely used in the MOSuite package. #>   Please report the issue at <https://github.com/CCBR/MOSuite/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> [1] \"The total number of genes in heatmap: 500\" #> Warning: The input is a data frame, convert it to the matrix. #> Warning: argument `height` is not supported in pheatmap -> Heatmap translation, #> skip it. print(p)"},{"path":"https://ccbr.github.io/MOSuite/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kelly Sovacool. Author, maintainer. Philip Homan. Author. Vishal Koparde. Author. Samantha Chill. Author. CCR Collaborative Bioinformatics Resource. Copyright holder.","code":""},{"path":"https://ccbr.github.io/MOSuite/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sovacool K, Homan P, Koparde V, Chill S (2025). MOSuite: R package downstream multi-omics analysis. R package version 0.0.0.9000, https://ccbr.github.io/MOSuite/, https://github.com/CCBR/MOSuite.","code":"@Manual{,   title = {MOSuite: R package for downstream multi-omics analysis},   author = {Kelly Sovacool and Philip Homan and Vishal Koparde and Samantha Chill},   year = {2025},   note = {R package version 0.0.0.9000, https://ccbr.github.io/MOSuite/},   url = {https://github.com/CCBR/MOSuite}, }"},{"path":"https://ccbr.github.io/MOSuite/index.html","id":"mosuite","dir":"","previous_headings":"","what":"R package for downstream multi-omics analysis","title":"R package for downstream multi-omics analysis","text":"R package downstream multi-omics analysis Designed differential RNA-seq analysis data represented counts table. See website information, documentation, examples: https://ccbr.github.io/MOSuite/","code":""},{"path":"https://ccbr.github.io/MOSuite/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R package for downstream multi-omics analysis","text":"can install development version MOSuite GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"CCBR/MOSuite\")"},{"path":"https://ccbr.github.io/MOSuite/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"R package for downstream multi-omics analysis","text":"Please see introductory vignette quick start tutorial. Take look reference documentation detailed information function package.","code":""},{"path":"https://ccbr.github.io/MOSuite/index.html","id":"help--contributing","dir":"","previous_headings":"","what":"Help & Contributing","title":"R package for downstream multi-omics analysis","text":"Come across bug? Open issue include minimal reproducible example. question? Ask discussions. Want contribute project? Check contributing guidelines.","code":""},{"path":"https://ccbr.github.io/MOSuite/index.html","id":"development-roadmap","dir":"","previous_headings":"","what":"Development Roadmap","title":"R package for downstream multi-omics analysis","text":"dev spreadsheet project board","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/MOSuite-package.html","id":null,"dir":"Reference","previous_headings":"","what":"MOSuite: R package for downstream multi-omics analysis — MOSuite-package","title":"MOSuite: R package for downstream multi-omics analysis — MOSuite-package","text":"Designed differential RNA-seq analysis data represented counts table.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/MOSuite-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MOSuite: R package for downstream multi-omics analysis — MOSuite-package","text":"See website information, documentation, examples: https://ccbr.github.io/MOSuite","code":""},{"path":[]},{"path":"https://ccbr.github.io/MOSuite/reference/MOSuite-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MOSuite: R package for downstream multi-omics analysis — MOSuite-package","text":"Maintainer: Kelly Sovacool kelly.sovacool@nih.gov (ORCID) Authors: Philip Homan philip.homan@nih.gov Vishal Koparde vishal.koparde@nih.gov (ORCID) Samantha Chill samantha.chill@nih.gov (ORCID) contributors: CCR Collaborative Bioinformatics Resource [copyright holder]","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/abort_packages_not_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Throw error if required packages are not installed. — abort_packages_not_installed","title":"Throw error if required packages are not installed. — abort_packages_not_installed","text":"Reports packages need installed parent function name. See https://stackoverflow.com/questions/15595478/--get--name---calling-function-inside--called-routine intended used inside function. error otherwise.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/abort_packages_not_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Throw error if required packages are not installed. — abort_packages_not_installed","text":"","code":"abort_packages_not_installed(...)"},{"path":"https://ccbr.github.io/MOSuite/reference/abort_packages_not_installed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Throw error if required packages are not installed. — abort_packages_not_installed","text":"... names packages check","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/abort_packages_not_installed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Throw error if required packages are not installed. — abort_packages_not_installed","text":"","code":"if (FALSE) { # \\dontrun{ abort_packages_not_installed(\"base\") abort_packages_not_installed(\"not-a-package-name\", \"caret\", \"dplyr\", \"non_package\") } # }"},{"path":"https://ccbr.github.io/MOSuite/reference/aggregate_duplicate_gene_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate duplicate gene names — aggregate_duplicate_gene_names","title":"Aggregate duplicate gene names — aggregate_duplicate_gene_names","text":"Aggregate duplicate gene names","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/aggregate_duplicate_gene_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate duplicate gene names — aggregate_duplicate_gene_names","text":"","code":"aggregate_duplicate_gene_names(   counts_dat,   gene_name_column_to_use_for_collapsing_duplicates,   aggregate_rows_with_duplicate_gene_names,   split_gene_name )"},{"path":"https://ccbr.github.io/MOSuite/reference/aggregate_duplicate_gene_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate duplicate gene names — aggregate_duplicate_gene_names","text":"counts_dat dataframe raw counts data gene_name_column_to_use_for_collapsing_duplicates Select column Feature IDs use grouping elements collapse counts matrix. log output list columns available identify duplicate row IDs order aggregate information. left blank \"Feature ID\" Column used Aggregate Rows. \"Feature ID\" column can split multiple IDs non Ensembl ID name used aggregate duplicate IDs. \"Feature ID\" column contain Ensembl IDs split Feature IDs named 'Feature_id_1' 'Feature_id_2'. case error occur manually enter Column ID field. aggregate_rows_with_duplicate_gene_names Feature ID (\"Cleanup Column Names\" parameter ) found duplicated multiple rows raw counts, Log report Feature IDs. Using default behavior (TRUE), counts rows duplicate Feature IDs aggregated single row. Counts summed across duplicate Feature ID rows within sample. Additional identifier columns, present (e.g. Ensembl IDs), preserved multiple matching identifiers additional columns appear comma-separated values aggregated row. split_gene_name TRUE, split gene name column special characters: ,|_-:","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/aggregate_duplicate_gene_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate duplicate gene names — aggregate_duplicate_gene_names","text":"data frame columns separated possible","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/as_integer_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert all numeric columns in a dataframe to integers — as_integer_df","title":"Convert all numeric columns in a dataframe to integers — as_integer_df","text":"Round doubles integers convert integer type","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/as_integer_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert all numeric columns in a dataframe to integers — as_integer_df","text":"","code":"as_integer_df(counts_tbl)"},{"path":"https://ccbr.github.io/MOSuite/reference/as_integer_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert all numeric columns in a dataframe to integers — as_integer_df","text":"counts_tbl data frame numeric columns","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/as_integer_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert all numeric columns in a dataframe to integers — as_integer_df","text":"data frame numeric columns integers","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/as_integer_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert all numeric columns in a dataframe to integers — as_integer_df","text":"","code":"if (FALSE) { # \\dontrun{ data.frame(a = c(0, 0.1, 2.3, 5L, 6.9)) %>% as_integer_df() } # }"},{"path":"https://ccbr.github.io/MOSuite/reference/batch_correct_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform batch correction — batch_correct_counts","title":"Perform batch correction — batch_correct_counts","text":"using sva::ComBat()","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/batch_correct_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform batch correction — batch_correct_counts","text":"","code":"batch_correct_counts(   moo,   count_type = \"norm\",   sub_count_type = \"voom\",   sample_id_colname = NULL,   feature_id_colname = NULL,   samples_to_include = NULL,   covariates_colnames = \"Group\",   batch_colname = \"Batch\",   label_colname = NULL,   colors_for_plots = NULL,   print_plots = options::opt(\"print_plots\"),   save_plots = options::opt(\"save_plots\"),   plots_subdir = \"batch\" )"},{"path":"https://ccbr.github.io/MOSuite/reference/batch_correct_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform batch correction — batch_correct_counts","text":"moo multiOmicDataSet object (see create_multiOmicDataSet_from_dataframes()) count_type type counts use – must name counts slot (moo@counts) sub_count_type count_type list, specify sub count type within list. (Default: \"voom\") sample_id_colname column sample metadata containing sample names. names column must exactly match names used sample column names input Counts Matrix. (Default: NULL - first column sample metadata used.) feature_id_colname column counts dataa containing Feature IDs (Usually Gene Protein ID). usually first column input Counts Matrix. columns Text type input Counts Matrix available select parameter. (Default: NULL - first column counts matrix used.) samples_to_include samples like include? Usually, choose sample columns, choose remove certain samples. Samples excluded removed step analysis downstream step. (Default: NULL - sample IDs moo@sample_meta used.) covariates_colnames column name(s) sample metadata containing variable(s) interest, phenotype. commonly column selected Groups Column. experimental designs may require add additional covariate columns . include batch_colname . batch_colname column sample metadata containing batch information. Samples extracted, prepared, sequenced separate times using separate materials/staff/equipment may belong different batches. data sets batches, case need batch correction. data set batches, can provide batch column value every row skip batch correction (alternatively, simply run function). label_colname column sample metadata containing sample labels wish appear plots produced template. can Sample Names Column. However, may desire different labels display figure (e.g. shorter labels sometimes preferred plots). case, select column preferred Labels . selected column contain unique names sample. (Default: NULL – sample_id_colname used.) colors_for_plots Colors PCA histogram picked, order, list. >12 samples groups, program choose wide range random colors print_plots Whether print plots analysis (Defaults FALSE, overwritable using option 'moo_print_plots' environment variable 'MOO_PRINT_PLOTS') save_plots Whether save plots files analysis (Defaults FALSE, overwritable using option 'moo_save_plots' environment variable 'MOO_SAVE_PLOTS') plots_subdir subdirectory plots saved save_plots TRUE","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/batch_correct_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform batch correction — batch_correct_counts","text":"multiOmicDataSet batch-corrected counts","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/batch_correct_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform batch correction — batch_correct_counts","text":"","code":"moo <- multiOmicDataSet(   sample_metadata = as.data.frame(nidap_sample_metadata),   anno_dat = data.frame(),   counts_lst = list(     \"raw\" = as.data.frame(nidap_raw_counts),     \"clean\" = as.data.frame(nidap_clean_raw_counts),     \"filt\" = as.data.frame(nidap_filtered_counts),     \"norm\" = list(       \"voom\" = as.data.frame(nidap_norm_counts)     )   ) ) %>%   batch_correct_counts(     count_type = \"norm\",     sub_count_type = \"voom\",     covariates_colnames = \"Group\",     batch_colname = \"Batch\",     label_colname = \"Label\"   ) #> * batch-correcting norm-voom counts #> Found2batches #> Adjusting for2covariate(s) or covariate level(s) #> Standardizing Data across genes #> Fitting L/S model and finding priors #> Finding parametric adjustments #> Adjusting the Data #> The total number of features in output: 7943 #> Number of samples after batch correction: 10  head(moo@counts[[\"batch\"]]) #>            Gene       A1       A2       A3       B1       B2       B3       C1 #> 1 0610007P14Rik 6.437738 6.251229 6.048600 6.284429 6.188062 6.180803 6.333751 #> 2 0610009B22Rik 4.904608 5.100317 4.960486 4.037742 4.843373 5.098318 4.013808 #> 3 0610010F05Rik 4.921026 5.701279 6.485933 6.140332 5.847360 5.560233 3.737422 #> 4 0610011F06Rik 5.309874 5.288411 5.069086 5.261067 5.269024 5.551350 5.548404 #> 5 0610012G03Rik 5.426686 5.406358 5.415468 4.625768 5.333482 5.529869 5.845995 #> 6 0610037L13Rik 5.413417 5.293344 5.144240 5.421276 3.945936 4.831507 4.443280 #>         C2       C3 #> 1 6.253867 6.530433 #> 2 4.391701 5.050022 #> 3 2.756696 2.865261 #> 4 5.919472 5.455400 #> 5 6.086350 4.769502 #> 6 4.651311 5.063511"},{"path":"https://ccbr.github.io/MOSuite/reference/calc_cpm.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate counts-per-million (CPM) on raw counts in a multiOmicDataSet — calc_cpm","title":"Calculate counts-per-million (CPM) on raw counts in a multiOmicDataSet — calc_cpm","text":"Calculate counts-per-million (CPM) raw counts multiOmicDataSet","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/calc_cpm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate counts-per-million (CPM) on raw counts in a multiOmicDataSet — calc_cpm","text":"","code":"calc_cpm(moo, ...)"},{"path":"https://ccbr.github.io/MOSuite/reference/calc_cpm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate counts-per-million (CPM) on raw counts in a multiOmicDataSet — calc_cpm","text":"moo multiOmicDataSet object ... additional arguments pass edgeR::cpm()","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/calc_cpm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate counts-per-million (CPM) on raw counts in a multiOmicDataSet — calc_cpm","text":"multiOmicDataSet cpm-transformed counts","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/calc_cpm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate counts-per-million (CPM) on raw counts in a multiOmicDataSet — calc_cpm","text":"","code":"sample_meta <- data.frame(   sample_id = c(\"KO_S3\", \"KO_S4\", \"WT_S1\", \"WT_S2\"),   condition = factor(     c(\"knockout\", \"knockout\", \"wildtype\", \"wildtype\"),     levels = c(\"wildtype\", \"knockout\")   ) ) moo <- create_multiOmicDataSet_from_dataframes(sample_meta, gene_counts) %>%   calc_cpm() head(moo@counts$cpm) #>              gene_id KO_S3 KO_S4 WT_S1 WT_S2 #> 1 ENSG00000121410.11     0     0     0     0 #> 2  ENSG00000268895.5     0     0     0     0 #> 3 ENSG00000148584.15     0     0     0     0 #> 4 ENSG00000175899.14     0     0     0     0 #> 5  ENSG00000245105.3     0     0     0     0 #> 6 ENSG00000166535.20     0     0     0     0"},{"path":"https://ccbr.github.io/MOSuite/reference/calc_cpm_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate CPM on a data frame — calc_cpm_df","title":"Calculate CPM on a data frame — calc_cpm_df","text":"Calculate CPM data frame","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/calc_cpm_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate CPM on a data frame — calc_cpm_df","text":"","code":"calc_cpm_df(dat, feature_id_colname = \"gene_id\", ...)"},{"path":"https://ccbr.github.io/MOSuite/reference/calc_cpm_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate CPM on a data frame — calc_cpm_df","text":"dat data frame counts gene column feature_id_colname name column counts_dat contains feature/gene IDs. (Default: NULL - first column count data used.) ... additional arguments pass edger::cpm()","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/calc_cpm_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate CPM on a data frame — calc_cpm_df","text":"cpm-transformed counts data frame","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/calc_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform principal components analysis — calc_pca","title":"Perform principal components analysis — calc_pca","text":"Perform principal components analysis","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/calc_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform principal components analysis — calc_pca","text":"","code":"calc_pca(   counts_dat,   sample_metadata,   sample_id_colname = NULL,   feature_id_colname = NULL )"},{"path":"https://ccbr.github.io/MOSuite/reference/calc_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform principal components analysis — calc_pca","text":"counts_dat data frame feature counts (e.g. expected feature counts RSEM). sample_metadata sample metadata data frame tibble. first column assumed contain sample IDs must correspond column names raw counts. sample_id_colname name column sample_metadata contains sample IDs. (Default: NULL - first column sample metadata used.) feature_id_colname name column counts_dat contains feature/gene IDs. (Default: NULL - first column count data used.)","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/calc_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform principal components analysis — calc_pca","text":"data frame statistics principal component","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/calc_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform principal components analysis — calc_pca","text":"","code":"calc_pca(nidap_raw_counts, nidap_sample_metadata) %>% head() #> # A tibble: 6 × 10 #>   Sample    PC  value std.dev percent cumulative Group Replicate Batch Label #>   <chr>  <dbl>  <dbl>   <dbl>   <dbl>      <dbl> <chr>     <dbl> <dbl> <chr> #> 1 A1         1 -40.6     61.8   21.2       0.212 A             1     1 A1    #> 2 A1         2  25.2     56.0   17.4       0.386 A             1     1 A1    #> 3 A1         3  -9.11    48.5   13.1       0.517 A             1     1 A1    #> 4 A1         4  21.7     46.9   12.2       0.639 A             1     1 A1    #> 5 A1         5 -29.3     42.6   10.1       0.740 A             1     1 A1    #> 6 A1         6 -74.5     41.7    9.68      0.837 A             1     1 A1"},{"path":"https://ccbr.github.io/MOSuite/reference/check_packages_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether package(s) are installed — check_packages_installed","title":"Check whether package(s) are installed — check_packages_installed","text":"Check whether package(s) installed","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/check_packages_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether package(s) are installed — check_packages_installed","text":"","code":"check_packages_installed(...)"},{"path":"https://ccbr.github.io/MOSuite/reference/check_packages_installed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether package(s) are installed — check_packages_installed","text":"... names packages check","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/check_packages_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether package(s) are installed — check_packages_installed","text":"named vector status packages; installed (TRUE) (FALSE)","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/check_packages_installed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether package(s) are installed — check_packages_installed","text":"","code":"if (FALSE) { # \\dontrun{ check_packages_installed(\"base\") check_packages_installed(\"not-a-package-name\") all(check_packages_installed(\"parallel\", \"doFuture\")) } # }"},{"path":"https://ccbr.github.io/MOSuite/reference/clean_raw_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Raw Counts — clean_raw_counts","title":"Clean Raw Counts — clean_raw_counts","text":"Clean Raw Counts","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/clean_raw_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Raw Counts — clean_raw_counts","text":"","code":"clean_raw_counts(   moo,   count_type = \"raw\",   sample_id_colname = NULL,   feature_id_colname = NULL,   samples_to_rename = c(\"\"),   cleanup_column_names = TRUE,   split_gene_name = TRUE,   aggregate_rows_with_duplicate_gene_names = TRUE,   gene_name_column_to_use_for_collapsing_duplicates = \"\",   print_plots = options::opt(\"print_plots\"),   save_plots = options::opt(\"save_plots\") )"},{"path":"https://ccbr.github.io/MOSuite/reference/clean_raw_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Raw Counts — clean_raw_counts","text":"moo multiOmicDataSet object (see create_multiOmicDataSet_from_dataframes()) count_type type counts use – must name counts slot (moo@counts) sample_id_colname column sample metadata containing sample names. names column must exactly match names used sample column names input Counts Matrix. (Default: NULL - first column sample metadata used.) feature_id_colname column counts dataa containing Feature IDs (Usually Gene Protein ID). usually first column input Counts Matrix. columns Text type input Counts Matrix available select parameter. (Default: NULL - first column counts matrix used.) samples_to_rename Plot Labels Column sample metadata table, can use parameter rename samples manually display PCA plot. Use \"Add item\" add additional sample renaming. Use following format describe old name (sample metadata table) want rename new name: old_name: new_name cleanup_column_names Invalid raw counts column names can cause errors downstream analysis. TRUE, invalid column names automatically altered correct format. format changes include adding \"X\" first character column name began numeral replacing special characters (\"-,:. \") underscores (\"_\"). Invalid sample names changes made detailed template log. split_gene_name TRUE, split gene name column special characters: ,|_-: aggregate_rows_with_duplicate_gene_names Feature ID (\"Cleanup Column Names\" parameter ) found duplicated multiple rows raw counts, Log report Feature IDs. Using default behavior (TRUE), counts rows duplicate Feature IDs aggregated single row. Counts summed across duplicate Feature ID rows within sample. Additional identifier columns, present (e.g. Ensembl IDs), preserved multiple matching identifiers additional columns appear comma-separated values aggregated row. gene_name_column_to_use_for_collapsing_duplicates Select column Feature IDs use grouping elements collapse counts matrix. log output list columns available identify duplicate row IDs order aggregate information. left blank \"Feature ID\" Column used Aggregate Rows. \"Feature ID\" column can split multiple IDs non Ensembl ID name used aggregate duplicate IDs. \"Feature ID\" column contain Ensembl IDs split Feature IDs named 'Feature_id_1' 'Feature_id_2'. case error occur manually enter Column ID field. print_plots Whether print plots analysis (Defaults FALSE, overwritable using option 'moo_print_plots' environment variable 'MOO_PRINT_PLOTS') save_plots Whether save plots files analysis (Defaults FALSE, overwritable using option 'moo_save_plots' environment variable 'MOO_SAVE_PLOTS')","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/clean_raw_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Raw Counts — clean_raw_counts","text":"multiOmicDataSet cleaned counts","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/clean_raw_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean Raw Counts — clean_raw_counts","text":"","code":"moo <- create_multiOmicDataSet_from_dataframes(   as.data.frame(nidap_sample_metadata),   as.data.frame(nidap_raw_counts),   sample_id_colname = \"Sample\", ) %>%   clean_raw_counts(sample_id_colname = \"Sample\", feature_id_colname = \"GeneName\") #> * cleaning raw counts #> Not able to identify multiple id's in GeneName #> Columns that can be used to aggregate gene information GeneName #> Aggregating the counts for the same ID in different chromosome locations. #> Column used to Aggregate duplicate IDs: GeneName #> Number of rows before Collapse: 43280 #> no duplicated IDs in GeneName head(moo@counts$clean) #>        GeneName A1 A2 A3 B1 B2 B3 C1 C2 C3 #> 1 RP23-271O17.1  0  0  0  0  0  0  0  0  0 #> 2       Gm26206  0  0  0  0  0  0  0  0  0 #> 3          Xkr4  0  0  0  0  0  0  0  0  0 #> 4 RP23-317L18.1  0  0  0  0  0  0  0  0  0 #> 5 RP23-317L18.4  0  0  0  0  0  0  0  0  0 #> 6 RP23-317L18.3  0  0  0  0  0  0  0  0  0"},{"path":"https://ccbr.github.io/MOSuite/reference/counts_dat_to_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data frame of gene counts to a matrix — counts_dat_to_matrix","title":"Convert a data frame of gene counts to a matrix — counts_dat_to_matrix","text":"Convert data frame gene counts matrix","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/counts_dat_to_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data frame of gene counts to a matrix — counts_dat_to_matrix","text":"","code":"counts_dat_to_matrix(counts_tbl, feature_id_colname = NULL)"},{"path":"https://ccbr.github.io/MOSuite/reference/counts_dat_to_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a data frame of gene counts to a matrix — counts_dat_to_matrix","text":"counts_tbl expected feature counts dataframe tibble, columns except feature_id_colname feature_id_colname name column counts_dat contains feature/gene IDs. (Default: NULL - first column count data used.)","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/counts_dat_to_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a data frame of gene counts to a matrix — counts_dat_to_matrix","text":"matrix gene counts rows gene IDs","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/counts_dat_to_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a data frame of gene counts to a matrix — counts_dat_to_matrix","text":"","code":"if (FALSE) { # \\dontrun{ counts_dat_to_matrix(head(gene_counts)) } # }"},{"path":"https://ccbr.github.io/MOSuite/reference/create_multiOmicDataSet_from_dataframes.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a multiOmicDataSet object from data frames — create_multiOmicDataSet_from_dataframes","title":"Construct a multiOmicDataSet object from data frames — create_multiOmicDataSet_from_dataframes","text":"Construct multiOmicDataSet object data frames","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/create_multiOmicDataSet_from_dataframes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a multiOmicDataSet object from data frames — create_multiOmicDataSet_from_dataframes","text":"","code":"create_multiOmicDataSet_from_dataframes(   sample_metadata,   counts_dat,   sample_id_colname = NULL,   feature_id_colname = NULL,   count_type = \"raw\" )"},{"path":"https://ccbr.github.io/MOSuite/reference/create_multiOmicDataSet_from_dataframes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a multiOmicDataSet object from data frames — create_multiOmicDataSet_from_dataframes","text":"sample_metadata sample metadata data frame tibble. first column assumed contain sample IDs must correspond column names raw counts. counts_dat data frame feature counts (e.g. expected feature counts RSEM). sample_id_colname name column sample_metadata contains sample IDs. (Default: NULL - first column sample metadata used.) feature_id_colname name column counts_dat contains feature/gene IDs. (Default: NULL - first column count data used.) count_type type assign values counts_dat counts slot","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/create_multiOmicDataSet_from_dataframes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a multiOmicDataSet object from data frames — create_multiOmicDataSet_from_dataframes","text":"multiOmicDataSet object","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/create_multiOmicDataSet_from_dataframes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a multiOmicDataSet object from data frames — create_multiOmicDataSet_from_dataframes","text":"","code":"sample_meta <- data.frame(   sample_id = c(\"KO_S3\", \"KO_S4\", \"WT_S1\", \"WT_S2\"),   condition = factor(     c(\"knockout\", \"knockout\", \"wildtype\", \"wildtype\"),     levels = c(\"wildtype\", \"knockout\")   ) ) moo <- create_multiOmicDataSet_from_dataframes(sample_meta, gene_counts) head(moo@sample_meta) #>   sample_id condition #> 1     KO_S3  knockout #> 2     KO_S4  knockout #> 3     WT_S1  wildtype #> 4     WT_S2  wildtype head(moo@counts$raw) #> # A tibble: 6 × 5 #>   gene_id            KO_S3 KO_S4 WT_S1 WT_S2 #>   <chr>              <dbl> <dbl> <dbl> <dbl> #> 1 ENSG00000121410.11     0     0     0     0 #> 2 ENSG00000268895.5      0     0     0     0 #> 3 ENSG00000148584.15     0     0     0     0 #> 4 ENSG00000175899.14     0     0     0     0 #> 5 ENSG00000245105.3      0     0     0     0 #> 6 ENSG00000166535.20     0     0     0     0 head(moo@annotation) #> # A tibble: 6 × 2 #>   gene_id            GeneName #>   <chr>              <chr>    #> 1 ENSG00000121410.11 A1BG     #> 2 ENSG00000268895.5  A1BG-AS1 #> 3 ENSG00000148584.15 A1CF     #> 4 ENSG00000175899.14 A2M      #> 5 ENSG00000245105.3  A2M-AS1  #> 6 ENSG00000166535.20 A2ML1"},{"path":"https://ccbr.github.io/MOSuite/reference/create_multiOmicDataSet_from_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a multiOmicDataSet object from tsv files. — create_multiOmicDataSet_from_files","title":"Construct a multiOmicDataSet object from tsv files. — create_multiOmicDataSet_from_files","text":"Construct multiOmicDataSet object tsv files.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/create_multiOmicDataSet_from_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a multiOmicDataSet object from tsv files. — create_multiOmicDataSet_from_files","text":"","code":"create_multiOmicDataSet_from_files(   sample_meta_filepath,   feature_counts_filepath,   count_type = \"raw\",   sample_id_colname = NULL,   feature_id_colname = NULL )"},{"path":"https://ccbr.github.io/MOSuite/reference/create_multiOmicDataSet_from_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a multiOmicDataSet object from tsv files. — create_multiOmicDataSet_from_files","text":"sample_meta_filepath path tsv file sample IDs metadata differential analysis. feature_counts_filepath path tsv file expected feature counts (e.g. gene counts RSEM). count_type type assign values counts_dat counts slot sample_id_colname name column sample_metadata contains sample IDs. (Default: NULL - first column sample metadata used.) feature_id_colname name column counts_dat contains feature/gene IDs. (Default: NULL - first column count data used.)","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/create_multiOmicDataSet_from_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a multiOmicDataSet object from tsv files. — create_multiOmicDataSet_from_files","text":"multiOmicDataSet object","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/create_multiOmicDataSet_from_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a multiOmicDataSet object from tsv files. — create_multiOmicDataSet_from_files","text":"","code":"moo <- create_multiOmicDataSet_from_files(   sample_meta_filepath = system.file(\"extdata\",     \"sample_metadata.tsv.gz\",     package = \"MOSuite\"   ),   feature_counts_filepath = system.file(\"extdata\",     \"RSEM.genes.expected_count.all_samples.txt.gz\",     package = \"MOSuite\"   ) ) #> Rows: 58929 Columns: 6 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (2): gene_id, GeneName #> dbl (4): KO_S3, KO_S4, WT_S1, WT_S2 #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 4 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (2): sample_id, condition #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. moo@counts$raw %>% head() #> # A tibble: 6 × 5 #>   gene_id            KO_S3 KO_S4 WT_S1 WT_S2 #>   <chr>              <dbl> <dbl> <dbl> <dbl> #> 1 ENSG00000121410.11     0     0     0     0 #> 2 ENSG00000268895.5      0     0     0     0 #> 3 ENSG00000148584.15     0     0     0     0 #> 4 ENSG00000175899.14     0     0     0     0 #> 5 ENSG00000245105.3      0     0     0     0 #> 6 ENSG00000166535.20     0     0     0     0 moo@sample_meta #> # A tibble: 4 × 2 #>   sample_id condition #>   <chr>     <chr>     #> 1 KO_S3     knockout  #> 2 KO_S4     knockout  #> 3 WT_S1     wildtype  #> 4 WT_S2     wildtype"},{"path":"https://ccbr.github.io/MOSuite/reference/filter_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter low counts — filter_counts","title":"Filter low counts — filter_counts","text":"often first step QC portion analysis filter features low raw counts across samples.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/filter_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter low counts — filter_counts","text":"","code":"filter_counts(   moo,   count_type = \"clean\",   feature_id_colname = NULL,   sample_id_colname = NULL,   group_colname = \"Group\",   label_colname = NULL,   samples_to_include = NULL,   minimum_count_value_to_be_considered_nonzero = 8,   minimum_number_of_samples_with_nonzero_counts_in_total = 7,   minimum_number_of_samples_with_nonzero_counts_in_a_group = 3,   use_cpm_counts_to_filter = TRUE,   use_group_based_filtering = FALSE,   principal_component_on_x_axis = 1,   principal_component_on_y_axis = 2,   legend_position_for_pca = \"top\",   point_size_for_pca = 1,   add_label_to_pca = TRUE,   label_font_size = 3,   label_offset_y_ = 2,   label_offset_x_ = 2,   samples_to_rename = c(\"\"),   color_histogram_by_group = FALSE,   set_min_max_for_x_axis_for_histogram = FALSE,   minimum_for_x_axis_for_histogram = -1,   maximum_for_x_axis_for_histogram = 1,   legend_position_for_histogram = \"top\",   legend_font_size_for_histogram = 10,   number_of_histogram_legend_columns = 6,   colors_for_plots = NULL,   print_plots = options::opt(\"print_plots\"),   save_plots = options::opt(\"save_plots\"),   interactive_plots = FALSE,   plots_subdir = \"filt\" )"},{"path":"https://ccbr.github.io/MOSuite/reference/filter_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter low counts — filter_counts","text":"moo multiOmicDataSet object (see create_multiOmicDataSet_from_dataframes()) count_type type counts use – must name counts slot (moo@counts) feature_id_colname column counts dataa containing Feature IDs (Usually Gene Protein ID). usually first column input Counts Matrix. columns Text type input Counts Matrix available select parameter. (Default: NULL - first column counts matrix used.) sample_id_colname column sample metadata containing sample names. names column must exactly match names used sample column names input Counts Matrix. (Default: NULL - first column sample metadata used.) group_colname column sample metadata containing sample group information. usually column showing experimental treatments sample belongs (e.g. WildType, Knockout, Tumor, Normal, , , etc.). label_colname column sample metadata containing sample labels wish appear plots produced template. can Sample Names Column. However, may desire different labels display figure (e.g. shorter labels sometimes preferred plots). case, select column preferred Labels . selected column contain unique names sample. (Default: NULL – sample_id_colname used.) samples_to_include samples like include? Usually, choose sample columns, choose remove certain samples. Samples excluded removed step analysis downstream step. (Default: NULL - sample IDs moo@sample_meta used.) minimum_count_value_to_be_considered_nonzero Minimum count value considered non-zero sample minimum_number_of_samples_with_nonzero_counts_in_total Minimum number samples (total) non-zero counts minimum_number_of_samples_with_nonzero_counts_in_a_group keeps genes least number samples nonzero CPM counts least one group use_cpm_counts_to_filter transformation performed counts matrix (eg Raw Counts) set TRUE. TRUE counts transformed CPM filtered based given criteria. gene counts matrix transformed (eg log2, CPM, FPKM form Normalization) set FALSE. FALSE transformation applied features filtered . RNAseq data RAW counts transformed CPM order properly filter. use_group_based_filtering TRUE, keeps features (e.g. genes) least certain number samples nonzero CPM counts least one group principal_component_on_x_axis principal component plot x-axis PCA plot. Choices include 1, 2, 3, ... (default: 1) principal_component_on_y_axis principal component plot y-axis PCA plot. Choices include 1, 2, 3, ... (default: 2) legend_position_for_pca legend position PCA plot point_size_for_pca geom point size PCA plot add_label_to_pca label points PCA plot label_font_size label font size PCA plot label_offset_y_ label offset y PCA plot label_offset_x_ label offset x PCA plot samples_to_rename Plot Labels Column sample metadata table, can use parameter rename samples manually display PCA plot. Use \"Add item\" add additional sample renaming. Use following format describe old name (sample metadata table) want rename new name: old_name: new_name color_histogram_by_group Set FALSE label histogram Sample Names, set TRUE label histogram column select \"Group Column Used Color Histogram\" parameter (). Default FALSE. set_min_max_for_x_axis_for_histogram whether set min/max value histogram x-axis minimum_for_x_axis_for_histogram x-axis minimum histogram plot maximum_for_x_axis_for_histogram x-axis maximum histogram plot legend_position_for_histogram legend position histogram plot. consider setting 'none' large number samples. legend_font_size_for_histogram legend font size histogram plot number_of_histogram_legend_columns number columns histogram legend colors_for_plots Colors PCA histogram picked, order, list. >12 samples groups, program choose wide range random colors print_plots Whether print plots analysis (Defaults FALSE, overwritable using option 'moo_print_plots' environment variable 'MOO_PRINT_PLOTS') save_plots Whether save plots files analysis (Defaults FALSE, overwritable using option 'moo_save_plots' environment variable 'MOO_SAVE_PLOTS') interactive_plots set TRUE make PCA Histogram plots interactive_plots plotly, allowing hover mouse point line view sample information. similarity heat map display toggle set TRUE. Default FALSE. plots_subdir subdirectory plots saved save_plots TRUE","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/filter_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter low counts — filter_counts","text":"multiOmicDataSet filtered counts","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/filter_counts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter low counts — filter_counts","text":"function takes multiOmicDataSet containing clean raw counts sample metadata table, returns multiOmicDataSet object filtered counts. also produces image consisting three QC plots. can tune threshold tuning low counts given gene deemed \"low\" filtered downstream analysis. default, parameter set 1, meaning raw count value less 1 count \"low\". QC plots provided help assess: (1) PCA Plot: within group variance expression dimensionality reduction; (2) Count Density Histogram: dis/similarity count distributions samples; (3) Similarity Heatmap: overall similarity samples one another based unsupervised clustering.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/filter_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter low counts — filter_counts","text":"","code":"moo <- create_multiOmicDataSet_from_dataframes(   as.data.frame(nidap_sample_metadata),   as.data.frame(nidap_clean_raw_counts),   sample_id_colname = \"Sample\",   feature_id_colname = \"Gene\" ) %>%   filter_counts(     count_type = \"raw\"   ) #> * filtering raw counts #> Number of features after filtering: 7943 head(moo@counts$filt) #>      Gene   A1   A2   A3   B1   B2   B3   C1   C2   C3 #> 1  Mrpl15 1245 1341 1476  965 1235 1784 1058 1732 1531 #> 2  Lypla1 1483 1410 1370 1146 1422 2624  991 1101 2352 #> 3   Tcea1 1381 2044 2051 2325 2386 1893 2391  916 2261 #> 4 Atp6v1h 1033 1959 1890 2075 2702 2150 2436 1321 1018 #> 5  Rb1cc1  666 1397 1576  681 2040 1988  774 1921 2660 #> 6  Pcmtd1  798  966  407  487  455  950 1710 1995 2502"},{"path":"https://ccbr.github.io/MOSuite/reference/gene_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"RSEM expected gene counts — gene_counts","title":"RSEM expected gene counts — gene_counts","text":"RSEM expected gene counts","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/gene_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RSEM expected gene counts — gene_counts","text":"","code":"gene_counts"},{"path":[]},{"path":"https://ccbr.github.io/MOSuite/reference/gene_counts.html","id":"gene-counts","dir":"Reference","previous_headings":"","what":"gene_counts","title":"RSEM expected gene counts — gene_counts","text":"data frame columns 'gene_id', 'GeneName', column sample's expected count.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/gene_counts.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"RSEM expected gene counts — gene_counts","text":"Generated running RENEE v2.5.8 test dataset","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/get_colors_lst.html","id":null,"dir":"Reference","previous_headings":"","what":"Create named list of default colors for plotting — get_colors_lst","title":"Create named list of default colors for plotting — get_colors_lst","text":"Create named list default colors plotting","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/get_colors_lst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create named list of default colors for plotting — get_colors_lst","text":"","code":"get_colors_lst(sample_metadata, palette_fun = grDevices::palette.colors, ...)"},{"path":"https://ccbr.github.io/MOSuite/reference/get_colors_lst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create named list of default colors for plotting — get_colors_lst","text":"sample_metadata sample metadata data frame tibble. first column assumed contain sample IDs must correspond column names raw counts. palette_fun Function selecting colors. Assumed contain n number colors. Default: grDevices::palette.colors() ... additional arguments forwarded palette_fun","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/get_colors_lst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create named list of default colors for plotting — get_colors_lst","text":"named list, column sample_metadata containing entry named vector colors","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/get_colors_lst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create named list of default colors for plotting — get_colors_lst","text":"","code":"get_colors_lst(nidap_sample_metadata) #> $Sample #>        A1        A2        A3        B1        B2        B3        C1        C2  #> \"#000000\" \"#E69F00\" \"#56B4E9\" \"#009E73\" \"#F0E442\" \"#0072B2\" \"#D55E00\" \"#CC79A7\"  #>        C3  #> \"#999999\"  #>  #> $Group #>         A         B         C  #> \"#000000\" \"#E69F00\" \"#56B4E9\"  #>  #> $Replicate #>         1         2         3  #> \"#000000\" \"#E69F00\" \"#56B4E9\"  #>  #> $Batch #>         1         2  #> \"#000000\" \"#E69F00\"  #>  #> $Label #>        A1        A2        A3        B1        B2        B3        C1        C2  #> \"#000000\" \"#E69F00\" \"#56B4E9\" \"#009E73\" \"#F0E442\" \"#0072B2\" \"#D55E00\" \"#CC79A7\"  #>        C3  #> \"#999999\"  #>  if (FALSE) { # \\dontrun{ get_colors_lst(nidap_sample_metadata, palette_fun = RColorBrewer::brewer.pal, name = \"Set3\") } # }"},{"path":"https://ccbr.github.io/MOSuite/reference/get_colors_vctr.html","id":null,"dir":"Reference","previous_headings":"","what":"Get vector of colors for observations in one column of a data frame — get_colors_vctr","title":"Get vector of colors for observations in one column of a data frame — get_colors_vctr","text":"Get vector colors observations one column data frame","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/get_colors_vctr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get vector of colors for observations in one column of a data frame — get_colors_vctr","text":"","code":"get_colors_vctr(dat, colname, palette_fun = grDevices::palette.colors, ...)"},{"path":"https://ccbr.github.io/MOSuite/reference/get_colors_vctr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get vector of colors for observations in one column of a data frame — get_colors_vctr","text":"dat data frame colname column name dat palette_fun Function selecting colors. Assumed contain n number colors. Default: grDevices::palette.colors() ... additional arguments forwarded palette_fun","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/get_colors_vctr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get vector of colors for observations in one column of a data frame — get_colors_vctr","text":"named vector colors unique observation dat$colname","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/get_pc_percent_lab.html","id":null,"dir":"Reference","previous_headings":"","what":"Get label for Principal Component with percent of variation — get_pc_percent_lab","title":"Get label for Principal Component with percent of variation — get_pc_percent_lab","text":"Get label Principal Component percent variation","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/get_pc_percent_lab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get label for Principal Component with percent of variation — get_pc_percent_lab","text":"","code":"get_pc_percent_lab(pca_df, pc)"},{"path":"https://ccbr.github.io/MOSuite/reference/get_pc_percent_lab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get label for Principal Component with percent of variation — get_pc_percent_lab","text":"pca_df data frame calc_pca() pc principal component report (e.g. 1)","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/get_pc_percent_lab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get label for Principal Component with percent of variation — get_pc_percent_lab","text":"glue string formatted PC's percent variation","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/get_pc_percent_lab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get label for Principal Component with percent of variation — get_pc_percent_lab","text":"","code":"if (FALSE) { # \\dontrun{ data.frame(PC = c(1, 2, 3), percent = c(40, 10, 0.5)) %>%   get_pc_percent_lab(2) } # }"},{"path":"https://ccbr.github.io/MOSuite/reference/get_random_colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Get random colors. — get_random_colors","title":"Get random colors. — get_random_colors","text":"Note: function guaranteed create color blind friendly palette. Consider using palettes RColorBrewer::display.brewer.(colorblindFriendly = TRUE).","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/get_random_colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get random colors. — get_random_colors","text":"","code":"get_random_colors(num_colors, n = 2000)"},{"path":"https://ccbr.github.io/MOSuite/reference/get_random_colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get random colors. — get_random_colors","text":"num_colors number colors select. n number random RGB values generate color space.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/get_random_colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get random colors. — get_random_colors","text":"vector random colors hex format.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/get_random_colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get random colors. — get_random_colors","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(10) get_random_colors(5) } # }"},{"path":"https://ccbr.github.io/MOSuite/reference/glue_gene_symbols.html","id":null,"dir":"Reference","previous_headings":"","what":"Glue gene_id and GeneName columns into one column — glue_gene_symbols","title":"Glue gene_id and GeneName columns into one column — glue_gene_symbols","text":"Glue gene_id GeneName columns one column","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/glue_gene_symbols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glue gene_id and GeneName columns into one column — glue_gene_symbols","text":"","code":"glue_gene_symbols(counts_dat)"},{"path":"https://ccbr.github.io/MOSuite/reference/glue_gene_symbols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Glue gene_id and GeneName columns into one column — glue_gene_symbols","text":"counts_dat data frame containing gene_id GeneName columns","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/glue_gene_symbols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Glue gene_id and GeneName columns into one column — glue_gene_symbols","text":"counts_dat gene_id GeneName joined | new gene_id column","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/glue_gene_symbols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Glue gene_id and GeneName columns into one column — glue_gene_symbols","text":"","code":"if (FALSE) { # \\dontrun{ gene_counts %>%   glue_gene_symbols() %>%   head() } # }"},{"path":"https://ccbr.github.io/MOSuite/reference/meta_tbl_to_dat.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert sample metadata from a tibble to a dataframe with sample IDs as row names — meta_tbl_to_dat","title":"Convert sample metadata from a tibble to a dataframe with sample IDs as row names — meta_tbl_to_dat","text":"Convert sample metadata tibble dataframe sample IDs row names","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/meta_tbl_to_dat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert sample metadata from a tibble to a dataframe with sample IDs as row names — meta_tbl_to_dat","text":"","code":"meta_tbl_to_dat(meta_tbl, sample_id_colname = sample_id)"},{"path":"https://ccbr.github.io/MOSuite/reference/meta_tbl_to_dat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert sample metadata from a tibble to a dataframe with sample IDs as row names — meta_tbl_to_dat","text":"meta_tbl tibble sample_id column sample_id_colname name column sample_metadata contains sample IDs. (Default: NULL - first column sample metadata used.)","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/meta_tbl_to_dat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert sample metadata from a tibble to a dataframe with sample IDs as row names — meta_tbl_to_dat","text":"dataframe row names sample IDs","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/meta_tbl_to_dat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert sample metadata from a tibble to a dataframe with sample IDs as row names — meta_tbl_to_dat","text":"","code":"sample_meta_tbl <- readr::read_tsv(system.file(\"extdata\",   \"sample_metadata.tsv.gz\",   package = \"MOSuite\" )) #> Rows: 4 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \"\\t\" #> chr (2): sample_id, condition #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. head(sample_meta_tbl) #> # A tibble: 4 × 2 #>   sample_id condition #>   <chr>     <chr>     #> 1 KO_S3     knockout  #> 2 KO_S4     knockout  #> 3 WT_S1     wildtype  #> 4 WT_S2     wildtype  meta_tbl_to_dat(sample_meta_tbl) #>       sample_id #> KO_S3     KO_S3 #> KO_S4     KO_S4 #> WT_S1     WT_S1 #> WT_S2     WT_S2"},{"path":"https://ccbr.github.io/MOSuite/reference/multiOmicDataSet.html","id":null,"dir":"Reference","previous_headings":"","what":"multiOmicDataSet class — multiOmicDataSet","title":"multiOmicDataSet class — multiOmicDataSet","text":"multiOmicDataSet class","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/multiOmicDataSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"multiOmicDataSet class — multiOmicDataSet","text":"","code":"multiOmicDataSet(sample_metadata, anno_dat, counts_lst, analyses_lst = list())"},{"path":"https://ccbr.github.io/MOSuite/reference/multiOmicDataSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"multiOmicDataSet class — multiOmicDataSet","text":"sample_metadata sample metadata data frame tibble. first column assumed contain sample IDs must correspond column names raw counts. anno_dat data frame feature annotations, gene symbols information features counts_lst. counts_lst named list data frames containing counts, e.g. expected feature counts RSEM. data frame expected contain feature_id column first column, remaining columns sample IDs sample_meta. analyses_lst named list analysis results, e.g. DESeq results object","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/nidap_batch_corrected_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch-corrected counts for the NIDAP test dataset. — nidap_batch_corrected_counts","title":"Batch-corrected counts for the NIDAP test dataset. — nidap_batch_corrected_counts","text":"Batch-corrected counts NIDAP test dataset.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/nidap_batch_corrected_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch-corrected counts for the NIDAP test dataset. — nidap_batch_corrected_counts","text":"","code":"nidap_batch_corrected_counts"},{"path":"https://ccbr.github.io/MOSuite/reference/nidap_batch_corrected_counts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Batch-corrected counts for the NIDAP test dataset. — nidap_batch_corrected_counts","text":"object class spec_tbl_df (inherits tbl_df, tbl, data.frame) 7943 rows 10 columns.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/nidap_batch_corrected_counts_2.html","id":null,"dir":"Reference","previous_headings":"","what":"Batch-corrected counts for the NIDAP test dataset. The result of running batch_correct_counts() on nidap_norm_counts. — nidap_batch_corrected_counts_2","title":"Batch-corrected counts for the NIDAP test dataset. The result of running batch_correct_counts() on nidap_norm_counts. — nidap_batch_corrected_counts_2","text":"Batch-corrected counts NIDAP test dataset. result running batch_correct_counts() nidap_norm_counts.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/nidap_batch_corrected_counts_2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Batch-corrected counts for the NIDAP test dataset. The result of running batch_correct_counts() on nidap_norm_counts. — nidap_batch_corrected_counts_2","text":"","code":"nidap_batch_corrected_counts_2"},{"path":"https://ccbr.github.io/MOSuite/reference/nidap_batch_corrected_counts_2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Batch-corrected counts for the NIDAP test dataset. The result of running batch_correct_counts() on nidap_norm_counts. — nidap_batch_corrected_counts_2","text":"object class data.frame 7943 rows 10 columns.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/nidap_clean_raw_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean raw counts for the NIDAP test dataset. The result of running clean_raw_counts() on nidap_raw_counts. — nidap_clean_raw_counts","title":"Clean raw counts for the NIDAP test dataset. The result of running clean_raw_counts() on nidap_raw_counts. — nidap_clean_raw_counts","text":"Clean raw counts NIDAP test dataset. result running clean_raw_counts() nidap_raw_counts.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/nidap_clean_raw_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean raw counts for the NIDAP test dataset. The result of running clean_raw_counts() on nidap_raw_counts. — nidap_clean_raw_counts","text":"","code":"nidap_clean_raw_counts"},{"path":"https://ccbr.github.io/MOSuite/reference/nidap_clean_raw_counts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Clean raw counts for the NIDAP test dataset. The result of running clean_raw_counts() on nidap_raw_counts. — nidap_clean_raw_counts","text":"object class spec_tbl_df (inherits tbl_df, tbl, data.frame) 43280 rows 10 columns.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/nidap_filtered_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Filtered counts for the NIDAP test dataset. The result of running filter_counts() on nidap_clean_raw_counts. — nidap_filtered_counts","title":"Filtered counts for the NIDAP test dataset. The result of running filter_counts() on nidap_clean_raw_counts. — nidap_filtered_counts","text":"Filtered counts NIDAP test dataset. result running filter_counts() nidap_clean_raw_counts.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/nidap_filtered_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filtered counts for the NIDAP test dataset. The result of running filter_counts() on nidap_clean_raw_counts. — nidap_filtered_counts","text":"","code":"nidap_filtered_counts"},{"path":"https://ccbr.github.io/MOSuite/reference/nidap_filtered_counts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Filtered counts for the NIDAP test dataset. The result of running filter_counts() on nidap_clean_raw_counts. — nidap_filtered_counts","text":"object class spec_tbl_df (inherits tbl_df, tbl, data.frame) 7943 rows 10 columns.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/nidap_norm_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalized counts for the NIDAP test dataset. The result of running normalize_counts() on nidap_filtered_counts. — nidap_norm_counts","title":"Normalized counts for the NIDAP test dataset. The result of running normalize_counts() on nidap_filtered_counts. — nidap_norm_counts","text":"Normalized counts NIDAP test dataset. result running normalize_counts() nidap_filtered_counts.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/nidap_norm_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalized counts for the NIDAP test dataset. The result of running normalize_counts() on nidap_filtered_counts. — nidap_norm_counts","text":"","code":"nidap_norm_counts"},{"path":"https://ccbr.github.io/MOSuite/reference/nidap_norm_counts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Normalized counts for the NIDAP test dataset. The result of running normalize_counts() on nidap_filtered_counts. — nidap_norm_counts","text":"object class spec_tbl_df (inherits tbl_df, tbl, data.frame) 7943 rows 10 columns.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/nidap_raw_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw counts for the NIDAP test dataset Pairs with nidap_sample_metadata. — nidap_raw_counts","title":"Raw counts for the NIDAP test dataset Pairs with nidap_sample_metadata. — nidap_raw_counts","text":"Raw counts NIDAP test dataset Pairs nidap_sample_metadata.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/nidap_raw_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw counts for the NIDAP test dataset Pairs with nidap_sample_metadata. — nidap_raw_counts","text":"","code":"nidap_raw_counts"},{"path":"https://ccbr.github.io/MOSuite/reference/nidap_raw_counts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Raw counts for the NIDAP test dataset Pairs with nidap_sample_metadata. — nidap_raw_counts","text":"object class spec_tbl_df (inherits tbl_df, tbl, data.frame) 43280 rows 10 columns.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/nidap_sample_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample metadata for the NIDAP test dataset — nidap_sample_metadata","title":"Sample metadata for the NIDAP test dataset — nidap_sample_metadata","text":"Sample metadata NIDAP test dataset","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/nidap_sample_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample metadata for the NIDAP test dataset — nidap_sample_metadata","text":"","code":"nidap_sample_metadata"},{"path":"https://ccbr.github.io/MOSuite/reference/nidap_sample_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample metadata for the NIDAP test dataset — nidap_sample_metadata","text":"object class spec_tbl_df (inherits tbl_df, tbl, data.frame) 9 rows 5 columns.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/normalize_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize counts — normalize_counts","title":"Normalize counts — normalize_counts","text":"Normalize counts","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/normalize_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize counts — normalize_counts","text":"","code":"normalize_counts(   moo,   count_type = \"filt\",   norm_type = \"voom\",   feature_id_colname = NULL,   samples_to_include = NULL,   sample_id_colname = NULL,   group_colname = \"Group\",   label_colname = NULL,   input_in_log_counts = FALSE,   voom_normalization_method = \"quantile\",   samples_to_rename = c(\"\"),   add_label_to_pca = TRUE,   principal_component_on_x_axis = 1,   principal_component_on_y_axis = 2,   legend_position_for_pca = \"top\",   label_offset_x_ = 2,   label_offset_y_ = 2,   label_font_size = 3,   point_size_for_pca = 8,   color_histogram_by_group = TRUE,   set_min_max_for_x_axis_for_histogram = FALSE,   minimum_for_x_axis_for_histogram = -1,   maximum_for_x_axis_for_histogram = 1,   legend_font_size_for_histogram = 10,   legend_position_for_histogram = \"top\",   colors_for_plots = NULL,   print_plots = options::opt(\"print_plots\"),   save_plots = options::opt(\"save_plots\"),   interactive_plots = FALSE,   plots_subdir = \"norm\" )"},{"path":"https://ccbr.github.io/MOSuite/reference/normalize_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize counts — normalize_counts","text":"moo multiOmicDataSet object (see create_multiOmicDataSet_from_dataframes()) count_type type counts use – must name counts slot (moo@counts) norm_type normalization type. Default: \"voom\" uses limma::voom. feature_id_colname column counts dataa containing Feature IDs (Usually Gene Protein ID). usually first column input Counts Matrix. columns Text type input Counts Matrix available select parameter. (Default: NULL - first column counts matrix used.) samples_to_include samples like include? Usually, choose sample columns, choose remove certain samples. Samples excluded removed step analysis downstream step. (Default: NULL - sample IDs moo@sample_meta used.) sample_id_colname column sample metadata containing sample names. names column must exactly match names used sample column names input Counts Matrix. (Default: NULL - first column sample metadata used.) group_colname column sample metadata containing sample group information. usually column showing experimental treatments sample belongs (e.g. WildType, Knockout, Tumor, Normal, , , etc.). label_colname column sample metadata containing sample labels wish appear plots produced template. can Sample Names Column. However, may desire different labels display figure (e.g. shorter labels sometimes preferred plots). case, select column preferred Labels . selected column contain unique names sample. (Default: NULL – sample_id_colname used.) input_in_log_counts set TRUE counts already log2-transformed voom_normalization_method Normalization method applied logCPM values using limma::voom samples_to_rename Plot Labels Column sample metadata table, can use parameter rename samples manually display PCA plot. Use \"Add item\" add additional sample renaming. Use following format describe old name (sample metadata table) want rename new name: old_name: new_name add_label_to_pca label points PCA plot principal_component_on_x_axis principal component plot x-axis PCA plot. Choices include 1, 2, 3, ... (default: 1) principal_component_on_y_axis principal component plot y-axis PCA plot. Choices include 1, 2, 3, ... (default: 2) legend_position_for_pca legend position PCA plot label_offset_x_ label offset x PCA plot label_offset_y_ label offset y PCA plot label_font_size label font size PCA plot point_size_for_pca geom point size PCA plot color_histogram_by_group Set FALSE label histogram Sample Names, set TRUE label histogram column select \"Group Column Used Color Histogram\" parameter (). Default FALSE. set_min_max_for_x_axis_for_histogram whether set min/max value histogram x-axis minimum_for_x_axis_for_histogram x-axis minimum histogram plot maximum_for_x_axis_for_histogram x-axis maximum histogram plot legend_font_size_for_histogram legend font size histogram plot legend_position_for_histogram legend position histogram plot. consider setting 'none' large number samples. colors_for_plots Colors PCA histogram picked, order, list. >12 samples groups, program choose wide range random colors print_plots Whether print plots analysis (Defaults FALSE, overwritable using option 'moo_print_plots' environment variable 'MOO_PRINT_PLOTS') save_plots Whether save plots files analysis (Defaults FALSE, overwritable using option 'moo_save_plots' environment variable 'MOO_SAVE_PLOTS') interactive_plots set TRUE make PCA Histogram plots interactive_plots plotly, allowing hover mouse point line view sample information. similarity heat map display toggle set TRUE. Default FALSE. plots_subdir subdirectory plots saved save_plots TRUE","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/normalize_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize counts — normalize_counts","text":"multiOmicDataSet normalized counts","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/normalize_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize counts — normalize_counts","text":"","code":"moo <- multiOmicDataSet(   sample_metadata = as.data.frame(nidap_sample_metadata),   anno_dat = data.frame(),   counts_lst = list(     \"raw\" = as.data.frame(nidap_raw_counts),     \"clean\" = as.data.frame(nidap_clean_raw_counts),     \"filt\" = as.data.frame(nidap_filtered_counts)   ) ) %>%   normalize_counts(     group_colname = \"Group\",     label_colname = \"Label\"   ) #> * normalizing filt counts #> Total number of features included: 7943 #> Sample columns: A1, Sample columns: A2, Sample columns: A3, Sample columns: B1, Sample columns: B2, Sample columns: B3, Sample columns: C1, Sample columns: C2, Sample columns: C3 head(moo@counts[[\"norm\"]][[\"voom\"]]) #>            Gene       A1       A2       A3       B1       B2       B3       C1 #> 1 0610007P14Rik 6.532994 6.192871 5.954869 6.375896 6.275880 6.119449 6.419913 #> 2 0610009B22Rik 4.484983 5.448875 5.286875 3.445612 4.451347 5.473886 3.500359 #> 3 0610010F05Rik 4.883688 5.668494 6.537590 6.216408 5.893089 5.498884 3.845207 #> 4 0610011F06Rik 5.199684 5.374085 5.112952 5.155558 5.163359 5.650929 5.441965 #> 5 0610012G03Rik 5.368118 5.445918 5.456511 4.567138 5.274928 5.625039 5.787457 #> 6 0610037L13Rik 5.327987 5.388747 5.233520 5.450169 3.656585 4.929386 4.274944 #>         C2       C3 #> 1 6.172204 6.497050 #> 2 4.709254 5.471951 #> 3 2.685177 2.805426 #> 4 6.043492 5.490958 #> 5 6.214163 4.682896 #> 6 4.744405 5.173531"},{"path":"https://ccbr.github.io/MOSuite/reference/options.html","id":null,"dir":"Reference","previous_headings":"","what":"MOSuite Options — options","title":"MOSuite Options — options","text":"Internally used, package-specific options. options prioritize R options() values, fall back environment variables undefined. neither option environment variable set, default value used.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/options.html","id":"checking-option-values","dir":"Reference","previous_headings":"","what":"Checking Option Values","title":"MOSuite Options — options","text":"Option values specific MOSuite can accessed passing package name env.","code":"options::opts(env = \"MOSuite\")  options::opt(x, default, env = \"MOSuite\")"},{"path":"https://ccbr.github.io/MOSuite/reference/options.html","id":"options","dir":"Reference","previous_headings":"","what":"Options","title":"MOSuite Options — options","text":"print_plots default: FALSE option: moo_print_plots envvar: MOO_PRINT_PLOTS (evaluated possible, raw string otherwise) save_plots default: FALSE option: moo_save_plots envvar: MOO_SAVE_PLOTS (evaluated possible, raw string otherwise) plots_dir default: \"figures/\" option: moo_plots_dir envvar: MOO_PLOTS_DIR (evaluated possible, raw string otherwise)","code":"FALSE FALSE \"figures/\""},{"path":[]},{"path":"https://ccbr.github.io/MOSuite/reference/plot_corr_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a correlation heatmap — plot_corr_heatmap","title":"Make a correlation heatmap — plot_corr_heatmap","text":"Make correlation heatmap","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/plot_corr_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a correlation heatmap — plot_corr_heatmap","text":"","code":"plot_corr_heatmap(   counts_dat,   sample_metadata,   sample_id_colname = NULL,   feature_id_colname = NULL,   group_colname = \"Group\",   label_colname = \"Label\",   color_values = c(\"#5954d6\", \"#e1562c\", \"#b80058\", \"#00c6f8\", \"#d163e6\", \"#00a76c\",     \"#ff9287\", \"#008cf9\", \"#006e00\", \"#796880\", \"#FFA500\", \"#878500\") )"},{"path":"https://ccbr.github.io/MOSuite/reference/plot_corr_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a correlation heatmap — plot_corr_heatmap","text":"counts_dat data frame feature counts (e.g. expected feature counts RSEM). sample_metadata sample metadata data frame tibble. first column assumed contain sample IDs must correspond column names raw counts. sample_id_colname column sample metadata containing sample names. names column must exactly match names used sample column names input Counts Matrix. (Default: NULL - first column sample metadata used.) feature_id_colname column counts dataa containing Feature IDs (Usually Gene Protein ID). usually first column input Counts Matrix. columns Text type input Counts Matrix available select parameter. (Default: NULL - first column counts matrix used.) group_colname column sample metadata containing sample group information. usually column showing experimental treatments sample belongs (e.g. WildType, Knockout, Tumor, Normal, , , etc.). label_colname column sample metadata containing sample labels wish appear plots produced template. can Sample Names Column. However, may desire different labels display figure (e.g. shorter labels sometimes preferred plots). case, select column preferred Labels . selected column contain unique names sample. (Default: NULL – sample_id_colname used.) color_values vector colors hex values names recognized R","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/plot_corr_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a correlation heatmap — plot_corr_heatmap","text":"heatmap ComplexHeatmap::Heatmap()","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/plot_expr_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot expression heatmap — plot_expr_heatmap","title":"Plot expression heatmap — plot_expr_heatmap","text":"default, samples (.e. columns) allowed cluster unsupervised fashion based similar expression profiles across included genes. can help identify samples non clustering group might expect based experimental design.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/plot_expr_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot expression heatmap — plot_expr_heatmap","text":"","code":"plot_expr_heatmap(   moo,   count_type = \"norm\",   sub_count_type = \"voom\",   sample_id_colname = NULL,   feature_id_colname = NULL,   group_colname = \"Group\",   label_colname = NULL,   samples_to_include = NULL,   color_values = c(\"#5954d6\", \"#e1562c\", \"#b80058\", \"#00c6f8\", \"#d163e6\", \"#00a76c\",     \"#ff9287\", \"#008cf9\", \"#006e00\", \"#796880\", \"#FFA500\", \"#878500\"),   include_all_genes = FALSE,   filter_top_genes_by_variance = TRUE,   top_genes_by_variance_to_include = 500,   specific_genes_to_include_in_heatmap = \"None\",   cluster_genes = TRUE,   gene_distance_metric = \"correlation\",   gene_clustering_method = \"average\",   display_gene_dendrograms = TRUE,   display_gene_names = FALSE,   center_and_rescale_expression = TRUE,   cluster_samples = FALSE,   arrange_sample_columns = TRUE,   order_by_gene_expression = FALSE,   gene_to_order_columns = \" \",   gene_expression_order = \"low_to_high\",   smpl_distance_metric = \"correlation\",   smpl_clustering_method = \"average\",   display_smpl_dendrograms = TRUE,   reorder_dendrogram = FALSE,   reorder_dendrogram_order = c(),   display_sample_names = TRUE,   group_columns = c(\"Group\", \"Replicate\", \"Batch\"),   assign_group_colors = FALSE,   assign_color_to_sample_groups = c(),   group_colors = c(\"indigo\", \"carrot\", \"lipstick\", \"turquoise\", \"lavender\", \"jade\",     \"coral\", \"azure\", \"green\", \"rum\", \"orange\", \"olive\"),   heatmap_color_scheme = \"Default\",   autoscale_heatmap_color = TRUE,   set_min_heatmap_color = -2,   set_max_heatmap_color = 2,   aspect_ratio = \"Auto\",   legend_font_size = 10,   gene_name_font_size = 4,   sample_name_font_size = 8,   display_numbers = FALSE )"},{"path":"https://ccbr.github.io/MOSuite/reference/plot_expr_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot expression heatmap — plot_expr_heatmap","text":"moo multiOmicDataSet object (see create_multiOmicDataSet_from_dataframes()) count_type type assign values counts_dat counts slot sub_count_type count_type list, specify sub count type within list. (Default: \"voom\") sample_id_colname name column sample_metadata contains sample IDs. (Default: NULL - first column sample metadata used.) feature_id_colname name column counts_dat contains feature/gene IDs. (Default: NULL - first column count data used.) group_colname column sample metadata containing sample group information. usually column showing experimental treatments sample belongs (e.g. WildType, Knockout, Tumor, Normal, , , etc.). label_colname column sample metadata containing sample labels wish appear plots produced template. can Sample Names Column. However, may desire different labels display figure (e.g. shorter labels sometimes preferred plots). case, select column preferred Labels . selected column contain unique names sample. (Default: NULL – sample_id_colname used.) samples_to_include samples like include? Usually, choose sample columns, choose remove certain samples. Samples excluded removed step analysis downstream step. (Default: NULL - sample IDs moo@sample_meta used.) color_values vector colors hex values names recognized R include_all_genes Set TRUE genes included. Set FALSE want filter genes variance /provide list specific genes appear heatmap. filter_top_genes_by_variance Set TRUE want include top genes variance. Set FALSE want filter genes variance. top_genes_by_variance_to_include number genes include filtering genes variance. parameter ignored \"Filter top genes variance\" set FALSE. specific_genes_to_include_in_heatmap Enter gene symbols included heatmap, gene symbol separated space others. Alternatively, paste column gene names spreadsheet application. parameter ignored \"Include genes\" set TRUE. cluster_genes Choose whether cluster rows (genes). TRUE, rows clustering applied. FALSE, clustering applied rows. gene_distance_metric Distance metric used clustering genes. (TODO document options) gene_clustering_method Clustering method metric used clustering samples. (TODO document options) display_gene_dendrograms Set TRUE show gene dendrograms. Set FALSE hide dendrograms. display_gene_names Set TRUE display gene names right side heatmap. Set FALSE hide gene names. center_and_rescale_expression Center rescale expression gene across included samples. cluster_samples Choose whether cluster columns (samples). TRUE, columns clustering applied. FALSE, clustering applied columns. arrange_sample_columns TRUE, arranges columns annotation groups. FALSE, \"Cluster Samples\" FALSE, samples appear order input (samples include) order_by_gene_expression TRUE, set gene name direction ordering gene_to_order_columns Gene order columns expression levels gene_expression_order Choose direction gene order smpl_distance_metric Distance metric used clustering samples.  (TODO document options) smpl_clustering_method Clustering method used clustering samples.  (TODO document options) display_smpl_dendrograms Set TRUE show sample dendrograms. Set FALSE hide dendrogram. reorder_dendrogram TRUE, set order dendrogram () reorder_dendrogram_order Reorder samples (columns) dendrogram name, e.g. “sample2”,“sample3\",“sample1\". display_sample_names Set TRUE want sample names displayed plot. Set FALSE hide sample names. group_columns Columns containing sample groups annotation tracks assign_group_colors TRUE, set groups assigned colors () assign_color_to_sample_groups Enter sample color format: group_name: color parameter ignored \"Assign Colors\" set FALSE. group_colors Set group annotation colors. heatmap_color_scheme color scheme (TODO document options) autoscale_heatmap_color Set TRUE autoscale heatmap colors maximum minimum heatmap color parameters. FALSE, set heatmap colors \"Set max heatmap color\" \"Set min heatmap color\" (). set_min_heatmap_color Autoscale heatmap color set FALSE, set minimum heatmap z-score value set_max_heatmap_color Autoscale heatmap color set FALSE, set maximum heatmap z-score value. aspect_ratio Set figure Aspect Ratio. Ratio refers entire figure including legend. set Auto figure size based number rows columns form counts matrix. default - Auto legend_font_size Set Font size figure legend. Default 10. gene_name_font_size Font size gene names. want gene labels show, toggle \"Display Gene Names\" FALSE sample_name_font_size Font size sample names. want display samples names, toggle \"Display sample names\" () FALSE display_numbers Setting FALSE (default) display numerical value heat heatmap. Set TRUE want see numbers plot.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/plot_expr_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot expression heatmap — plot_expr_heatmap","text":"heatmap ComplexHeatmap::pheatmap()","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/plot_expr_heatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot expression heatmap — plot_expr_heatmap","text":", default, top 500 genes variance used, generally going include genes distinguish samples one another. can change well many parameters heatmap explore advanced options.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/plot_histogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot histogram — plot_histogram","title":"Plot histogram — plot_histogram","text":"Plot histogram","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/plot_histogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot histogram — plot_histogram","text":"","code":"plot_histogram(   counts_dat,   sample_metadata,   sample_id_colname = NULL,   feature_id_colname = NULL,   group_colname = \"Group\",   label_colname = \"Label\",   color_values = c(\"#5954d6\", \"#e1562c\", \"#b80058\", \"#00c6f8\", \"#d163e6\", \"#00a76c\",     \"#ff9287\", \"#008cf9\", \"#006e00\", \"#796880\", \"#FFA500\", \"#878500\"),   color_by_group = FALSE,   set_min_max_for_x_axis = FALSE,   minimum_for_x_axis = -1,   maximum_for_x_axis = 1,   legend_position = \"top\",   legend_font_size = 10,   number_of_legend_columns = 6,   x_axis_label = \"Counts\",   y_axis_label = \"Density\",   interactive_plots = FALSE )"},{"path":"https://ccbr.github.io/MOSuite/reference/plot_histogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot histogram — plot_histogram","text":"counts_dat data frame feature counts (e.g. expected feature counts RSEM). sample_metadata sample metadata data frame tibble. first column assumed contain sample IDs must correspond column names raw counts. sample_id_colname name column sample_metadata contains sample IDs. (Default: NULL - first column sample metadata used.) feature_id_colname name column counts_dat contains feature/gene IDs. (Default: NULL - first column count data used.) group_colname column sample metadata containing sample group information. usually column showing experimental treatments sample belongs (e.g. WildType, Knockout, Tumor, Normal, , , etc.). label_colname column sample metadata containing sample labels wish appear plots produced template. can Sample Names Column. However, may desire different labels display figure (e.g. shorter labels sometimes preferred plots). case, select column preferred Labels . selected column contain unique names sample. (Default: NULL – sample_id_colname used.) color_values vector colors hex values names recognized R color_by_group Set FALSE label histogram Sample Names, set TRUE label histogram column select \"Group Column Used Color Histogram\" parameter (). Default FALSE. set_min_max_for_x_axis whether override default ggplot2::xlim() (default: FALSE) minimum_for_x_axis value override default min ggplot2::xlim() maximum_for_x_axis value override default max ggplot2::xlim() legend_position passed legend.position ggplot2::theme() legend_font_size passed ggplot2::element_text() via ggplot2::theme() number_of_legend_columns passed ncol ggplot2::guide_legend() x_axis_label text label x axis ggplot2::xlab() y_axis_label text label y axis ggplot2::ylab() interactive_plots set TRUE make PCA Histogram plots interactive_plots plotly, allowing hover mouse point line view sample information. similarity heat map display toggle set TRUE. Default FALSE.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/plot_histogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot histogram — plot_histogram","text":"ggplot object","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/plot_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform and plot a Principal Components Analysis — plot_pca","title":"Perform and plot a Principal Components Analysis — plot_pca","text":"Perform plot Principal Components Analysis","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/plot_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform and plot a Principal Components Analysis — plot_pca","text":"","code":"plot_pca(   counts_dat,   sample_metadata,   sample_id_colname = NULL,   feature_id_colname = NULL,   samples_to_rename = NULL,   group_colname = \"Group\",   label_colname = \"Label\",   color_values = c(\"#5954d6\", \"#e1562c\", \"#b80058\", \"#00c6f8\", \"#d163e6\", \"#00a76c\",     \"#ff9287\", \"#008cf9\", \"#006e00\", \"#796880\", \"#FFA500\", \"#878500\"),   principal_components = c(1, 2),   legend_position = \"top\",   point_size = 1,   add_label = TRUE,   label_font_size = 3,   label_offset_x_ = 2,   label_offset_y_ = 2,   interactive_plots = FALSE )"},{"path":"https://ccbr.github.io/MOSuite/reference/plot_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform and plot a Principal Components Analysis — plot_pca","text":"counts_dat data frame feature counts (e.g. expected feature counts RSEM). sample_metadata sample metadata data frame tibble. first column assumed contain sample IDs must correspond column names raw counts. sample_id_colname name column sample_metadata contains sample IDs. (Default: NULL - first column sample metadata used.) feature_id_colname name column counts_dat contains feature/gene IDs. (Default: NULL - first column count data used.) samples_to_rename Plot Labels Column sample metadata table, can use parameter rename samples manually display PCA plot. Use \"Add item\" add additional sample renaming. Use following format describe old name (sample metadata table) want rename new name: old_name: new_name group_colname column sample metadata containing sample group information. usually column showing experimental treatments sample belongs (e.g. WildType, Knockout, Tumor, Normal, , , etc.). label_colname column sample metadata containing sample labels wish appear plots produced template. can Sample Names Column. However, may desire different labels display figure (e.g. shorter labels sometimes preferred plots). case, select column preferred Labels . selected column contain unique names sample. (Default: NULL – sample_id_colname used.) color_values vector colors hex values names recognized R principal_components vector numbered principal components plot (Default: c(1,2)) legend_position passed legend.position ggplot2::theme() point_size size ggplot2::geom_point() add_label whether add text labels points label_font_size label font size PCA plot label_offset_x_ label offset x PCA plot label_offset_y_ label offset y PCA plot interactive_plots set TRUE make PCA Histogram plots interactive_plots plotly, allowing hover mouse point line view sample information. similarity heat map display toggle set TRUE. Default FALSE.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/plot_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform and plot a Principal Components Analysis — plot_pca","text":"ggplot object","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/plot_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform and plot a Principal Components Analysis — plot_pca","text":"","code":"plot_pca(nidap_raw_counts, nidap_sample_metadata)"},{"path":"https://ccbr.github.io/MOSuite/reference/plot_pca_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot 3-Dimensional PCA with plotly — plot_pca_3d","title":"Plot 3-Dimensional PCA with plotly — plot_pca_3d","text":"Plot 3-Dimensional PCA plotly","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/plot_pca_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot 3-Dimensional PCA with plotly — plot_pca_3d","text":"","code":"plot_pca_3d(   counts_dat,   sample_metadata,   sample_id_colname = NULL,   samples_to_rename = NULL,   group_colname = \"Group\",   label_colname = \"Label\",   principal_components = c(1, 2, 3),   point_size = 8,   label_font_size = 24,   color_values = c(\"#5954d6\", \"#e1562c\", \"#b80058\", \"#00c6f8\", \"#d163e6\", \"#00a76c\",     \"#ff9287\", \"#008cf9\", \"#006e00\", \"#796880\", \"#FFA500\", \"#878500\"),   plot_title = \"PCA 3D\" )"},{"path":"https://ccbr.github.io/MOSuite/reference/plot_pca_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot 3-Dimensional PCA with plotly — plot_pca_3d","text":"counts_dat data frame feature counts (e.g. expected feature counts RSEM). sample_metadata sample metadata data frame tibble. first column assumed contain sample IDs must correspond column names raw counts. sample_id_colname name column sample_metadata contains sample IDs. (Default: NULL - first column sample metadata used.) samples_to_rename Plot Labels Column sample metadata table, can use parameter rename samples manually display PCA plot. Use \"Add item\" add additional sample renaming. Use following format describe old name (sample metadata table) want rename new name: old_name: new_name group_colname column sample metadata containing sample group information. usually column showing experimental treatments sample belongs (e.g. WildType, Knockout, Tumor, Normal, , , etc.). label_colname column sample metadata containing sample labels wish appear plots produced template. can Sample Names Column. However, may desire different labels display figure (e.g. shorter labels sometimes preferred plots). case, select column preferred Labels . selected column contain unique names sample. (Default: NULL – sample_id_colname used.) principal_components vector numbered principal components plot (Default: c(1,2,3)) point_size size ggplot2::geom_point() label_font_size label font size PCA plot color_values vector colors hex values names recognized R plot_title title plot","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/plot_pca_3d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot 3-Dimensional PCA with plotly — plot_pca_3d","text":"plotly::plot_ly figure","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/plot_pca_3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot 3-Dimensional PCA with plotly — plot_pca_3d","text":"","code":"plot_pca_3d(nidap_raw_counts, nidap_sample_metadata)  {\"x\":{\"visdat\":{\"1c8e3007b9a1\":[\"function () \",\"plotlyVisDat\"]},\"cur_data\":\"1c8e3007b9a1\",\"attrs\":{\"1c8e3007b9a1\":{\"x\":{},\"y\":{},\"z\":{},\"mode\":\"markers\",\"marker\":{\"size\":8},\"hoverinfo\":\"text\",\"text\":{},\"color\":{},\"size\":24,\"colors\":[\"#5954d6\",\"#e1562c\",\"#b80058\",\"#00c6f8\",\"#d163e6\",\"#00a76c\",\"#ff9287\",\"#008cf9\",\"#006e00\",\"#796880\",\"#FFA500\",\"#878500\"],\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20],\"type\":\"scatter3d\"}},\"layout\":{\"margin\":{\"b\":40,\"l\":60,\"t\":25,\"r\":10},\"scene\":{\"xaxis\":{\"title\":\"PC1\"},\"yaxis\":{\"title\":\"PC2\"},\"zaxis\":{\"title\":\"PC3\"}},\"hovermode\":\"closest\",\"showlegend\":true},\"source\":\"A\",\"config\":{\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"data\":[{\"x\":[-40.624166881644548,-56.213316043361097,-69.107071102044515],\"y\":[25.229726861915786,6.1338577161232601,-21.895234510691349],\"z\":[-9.1146448284552086,-29.509826980510748,-36.358202516253542],\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(89,84,214,1)\",\"size\":8,\"sizemode\":\"area\",\"line\":{\"color\":\"rgba(89,84,214,1)\"}},\"hoverinfo\":[\"text\",\"text\",\"text\"],\"text\":[\"A1\",\"A2\",\"A3\"],\"type\":\"scatter3d\",\"name\":\"A\",\"textfont\":{\"color\":\"rgba(89,84,214,1)\",\"size\":55},\"error_y\":{\"color\":\"rgba(89,84,214,1)\",\"width\":55},\"error_x\":{\"color\":\"rgba(89,84,214,1)\",\"width\":55},\"line\":{\"color\":\"rgba(89,84,214,1)\",\"width\":55},\"frame\":null},{\"x\":[-36.16602512157435,-25.865255255389862,-9.6232450176944173],\"y\":[7.8050429797890217,-11.213808049471634,9.3272469604228387],\"z\":[18.215438247891832,30.862641867877986,58.980343929227899],\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(166,163,121,1)\",\"size\":8,\"sizemode\":\"area\",\"line\":{\"color\":\"rgba(166,163,121,1)\"}},\"hoverinfo\":[\"text\",\"text\",\"text\"],\"text\":[\"B1\",\"B2\",\"B3\"],\"type\":\"scatter3d\",\"name\":\"B\",\"textfont\":{\"color\":\"rgba(166,163,121,1)\",\"size\":55},\"error_y\":{\"color\":\"rgba(166,163,121,1)\",\"width\":55},\"error_x\":{\"color\":\"rgba(166,163,121,1)\",\"width\":55},\"line\":{\"color\":\"rgba(166,163,121,1)\",\"width\":55},\"frame\":null},{\"x\":[74.334557668027173,85.044222680901271,78.220299072780293],\"y\":[-86.72868022299302,117.99234054350596,-46.650492278600879],\"z\":[-73.882686673690046,-31.798500917774529,72.605437871686334],\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(135,133,0,1)\",\"size\":8,\"sizemode\":\"area\",\"line\":{\"color\":\"rgba(135,133,0,1)\"}},\"hoverinfo\":[\"text\",\"text\",\"text\"],\"text\":[\"C1\",\"C2\",\"C3\"],\"type\":\"scatter3d\",\"name\":\"C\",\"textfont\":{\"color\":\"rgba(135,133,0,1)\",\"size\":55},\"error_y\":{\"color\":\"rgba(135,133,0,1)\",\"width\":55},\"error_x\":{\"color\":\"rgba(135,133,0,1)\",\"width\":55},\"line\":{\"color\":\"rgba(135,133,0,1)\",\"width\":55},\"frame\":null}],\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://ccbr.github.io/MOSuite/reference/plot_read_depth.html","id":null,"dir":"Reference","previous_headings":"","what":"Create read depth plot — plot_read_depth","title":"Create read depth plot — plot_read_depth","text":"Create read depth plot","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/plot_read_depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create read depth plot — plot_read_depth","text":"","code":"plot_read_depth(counts_dat)"},{"path":"https://ccbr.github.io/MOSuite/reference/plot_read_depth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create read depth plot — plot_read_depth","text":"counts_dat dataframe raw counts data","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/plot_read_depth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create read depth plot — plot_read_depth","text":"ggplot object","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/print_or_save_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Print and/or save a ggplot — print_or_save_plot","title":"Print and/or save a ggplot — print_or_save_plot","text":"save_plots TRUE, plot saved image path file.path(plots_dir, filename). plot_obj ggplot, ggplot2::ggsave() used save image. Otherwise, graphics_device used (grDevice::png() default).","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/print_or_save_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print and/or save a ggplot — print_or_save_plot","text":"","code":"print_or_save_plot(   plot_obj,   filename,   print_plots = options::opt(\"print_plots\"),   save_plots = options::opt(\"save_plots\"),   plots_dir = options::opt(\"plots_dir\"),   graphics_device = grDevices::png,   ... )"},{"path":"https://ccbr.github.io/MOSuite/reference/print_or_save_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print and/or save a ggplot — print_or_save_plot","text":"plot_obj plot object (e.g. ggplot, ComplexHeatmap...) filename name output file. joined plots_dir option. print_plots Whether print plots analysis (Defaults FALSE, overwritable using option 'moo_print_plots' environment variable 'MOO_PRINT_PLOTS') save_plots Whether save plots files analysis (Defaults FALSE, overwritable using option 'moo_save_plots' environment variable 'MOO_SAVE_PLOTS') plots_dir Path plots saved moo_save_plots TRUE (Defaults \"figures/\", overwritable using option 'moo_plots_dir' environment variable 'MOO_PLOTS_DIR') graphics_device Default: grDevice::png(). used plot ggplot. ... arguments forwarded ggplot2::ggsave()","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/print_or_save_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print and/or save a ggplot — print_or_save_plot","text":"invisibly returns path plot image saved disk","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"dplyr pipe — reexports","title":"dplyr pipe — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% magrittr %<>% rlang :=, .data","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/remove_low_count_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove low-count genes — remove_low_count_genes","title":"Remove low-count genes — remove_low_count_genes","text":"TODO function also transforms raw counts CPM, separate function step, filter_counts function()","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/remove_low_count_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove low-count genes — remove_low_count_genes","text":"","code":"remove_low_count_genes(   counts_dat,   sample_metadata,   feature_id_colname,   group_colname,   use_cpm_counts_to_filter = TRUE,   use_group_based_filtering = FALSE,   minimum_count_value_to_be_considered_nonzero = 8,   minimum_number_of_samples_with_nonzero_counts_in_total = 7,   minimum_number_of_samples_with_nonzero_counts_in_a_group = 3 )"},{"path":"https://ccbr.github.io/MOSuite/reference/remove_low_count_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove low-count genes — remove_low_count_genes","text":"feature_id_colname column counts dataa containing Feature IDs (Usually Gene Protein ID). usually first column input Counts Matrix. columns Text type input Counts Matrix available select parameter. (Default: NULL - first column counts matrix used.) group_colname column sample metadata containing sample group information. usually column showing experimental treatments sample belongs (e.g. WildType, Knockout, Tumor, Normal, , , etc.). use_cpm_counts_to_filter transformation performed counts matrix (eg Raw Counts) set TRUE. TRUE counts transformed CPM filtered based given criteria. gene counts matrix transformed (eg log2, CPM, FPKM form Normalization) set FALSE. FALSE transformation applied features filtered . RNAseq data RAW counts transformed CPM order properly filter. use_group_based_filtering TRUE, keeps features (e.g. genes) least certain number samples nonzero CPM counts least one group minimum_count_value_to_be_considered_nonzero Minimum count value considered non-zero sample minimum_number_of_samples_with_nonzero_counts_in_total Minimum number samples (total) non-zero counts minimum_number_of_samples_with_nonzero_counts_in_a_group keeps genes least number samples nonzero CPM counts least one group","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/remove_low_count_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove low-count genes — remove_low_count_genes","text":"counts matrix low-count genes removed","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/rename_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename samples — rename_samples","title":"Rename samples — rename_samples","text":"TODO happen right beginning template?","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/rename_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename samples — rename_samples","text":"","code":"rename_samples(dat, samples_to_rename_manually)"},{"path":"https://ccbr.github.io/MOSuite/reference/rename_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename samples — rename_samples","text":"dat data frame samples_to_rename_manually TODO use sample metadata spreadsheet custom column. Need document format object.","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/rename_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename samples — rename_samples","text":"data frame samples renamed","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/rename_samples.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rename samples — rename_samples","text":"TODO accept new names samples sample metadata spreadsheet","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/run_deseq2.html","id":null,"dir":"Reference","previous_headings":"","what":"Run DESeq2 on a multiOmicDataSet — run_deseq2","title":"Run DESeq2 on a multiOmicDataSet — run_deseq2","text":"Run DESeq2 multiOmicDataSet","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/run_deseq2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run DESeq2 on a multiOmicDataSet — run_deseq2","text":"","code":"run_deseq2(moo, design, ...)"},{"path":"https://ccbr.github.io/MOSuite/reference/run_deseq2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run DESeq2 on a multiOmicDataSet — run_deseq2","text":"moo multiOmicDataSet object design model formula experimental design. Columns must exist meta_dat. ... remaining variables forwarded DESeq2::DESeq().","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/run_deseq2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run DESeq2 on a multiOmicDataSet — run_deseq2","text":"multiOmicDataSet object DESeq2 slot filled","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/run_deseq2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run DESeq2 on a multiOmicDataSet — run_deseq2","text":"","code":"if (FALSE) { # \\dontrun{ moo <- create_multiOmicDataSet_from_files(   system.file(\"extdata\", \"sample_metadata.tsv.gz\",     package = \"MOSuite\"   ),   system.file(\"extdata\",     \"RSEM.genes.expected_count.all_samples.txt.gz\",     package = \"MOSuite\"   ) ) %>% filter_counts() moo <- run_deseq2(moo, ~condition) } # }"},{"path":"https://ccbr.github.io/MOSuite/reference/separate_gene_meta_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Separate gene metadata column — separate_gene_meta_columns","title":"Separate gene metadata column — separate_gene_meta_columns","text":"Separate gene metadata column","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/separate_gene_meta_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separate gene metadata column — separate_gene_meta_columns","text":"","code":"separate_gene_meta_columns(counts_dat, split_gene_name = TRUE)"},{"path":"https://ccbr.github.io/MOSuite/reference/separate_gene_meta_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separate gene metadata column — separate_gene_meta_columns","text":"counts_dat dataframe raw counts data split_gene_name TRUE, split gene name column special characters: ,|_-:","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/separate_gene_meta_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separate gene metadata column — separate_gene_meta_columns","text":"dataframe metadata separated","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/set_color_pal.html","id":null,"dir":"Reference","previous_headings":"","what":"Set color palette for a single group/column — set_color_pal","title":"Set color palette for a single group/column — set_color_pal","text":"allows set custom palettes individually groups dataset","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/set_color_pal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set color palette for a single group/column — set_color_pal","text":"","code":"set_color_pal(moo, colname, palette_fun = grDevices::palette.colors, ...)"},{"path":"https://ccbr.github.io/MOSuite/reference/set_color_pal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set color palette for a single group/column — set_color_pal","text":"moo multiOmicDataSet object (see create_multiOmicDataSet_from_dataframes()) colname group column name set palette palette_fun Function selecting colors. Assumed contain n number colors. Default: grDevices::palette.colors() ... additional arguments forwarded palette_fun","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/set_color_pal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set color palette for a single group/column — set_color_pal","text":"moo colors updated moo@analyses$colors$colname","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/set_color_pal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set color palette for a single group/column — set_color_pal","text":"","code":"moo <- create_multiOmicDataSet_from_dataframes(   sample_metadata = as.data.frame(nidap_sample_metadata),   counts_dat = as.data.frame(nidap_raw_counts) ) moo@analyses$colors$Group #>         A         B         C  #> \"#000000\" \"#E69F00\" \"#56B4E9\"  moo %<>% set_color_pal(\"Group\", palette_fun = RColorBrewer::brewer.pal, name = \"Set2\") moo@analyses$colors$Group #>         A         B         C  #> \"#66C2A5\" \"#FC8D62\" \"#8DA0CB\""},{"path":"https://ccbr.github.io/MOSuite/reference/strip_ensembl_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove version number from ENSEMBLE IDs — strip_ensembl_version","title":"Remove version number from ENSEMBLE IDs — strip_ensembl_version","text":"Remove version number ENSEMBLE IDs","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/strip_ensembl_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove version number from ENSEMBLE IDs — strip_ensembl_version","text":"","code":"strip_ensembl_version(x)"},{"path":"https://ccbr.github.io/MOSuite/reference/strip_ensembl_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove version number from ENSEMBLE IDs — strip_ensembl_version","text":"x vector IDs","code":""},{"path":"https://ccbr.github.io/MOSuite/reference/strip_ensembl_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove version number from ENSEMBLE IDs — strip_ensembl_version","text":"IDs without version numbers","code":""},{"path":"https://ccbr.github.io/MOSuite/news/index.html","id":"mosuite-development-version-0009000","dir":"Changelog","previous_headings":"","what":"MOSuite development version 0.0.0.9000","title":"MOSuite development version 0.0.0.9000","text":"first release MOSuite 🎉 Note: start development, package called reneeTools. Later renamed MOSuite. (#76)","code":""},{"path":"https://ccbr.github.io/MOSuite/news/index.html","id":"main-functions--classes-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Main functions & classes","title":"MOSuite development version 0.0.0.9000","text":"create_multiOmicDataSet_from_files() create_multiOmicDataSet_from_dataframes() run_deseq2() calc_cpm() (#38) filter_counts() (#38) clean_raw_counts() (#79) normalize_counts() (#82) batch_correct_counts() (#87)","code":""},{"path":"https://ccbr.github.io/MOSuite/news/index.html","id":"visualization-0-0-0-9000","dir":"Changelog","previous_headings":"Main functions & classes","what":"visualization","title":"MOSuite development version 0.0.0.9000","text":"plot_histogram() plot_corr_heatmap() plot_expr_heatmap() (#90) plot_pca() plot_pca_3d() (#88)","code":""},{"path":"https://ccbr.github.io/MOSuite/news/index.html","id":"vignettes-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"vignettes","title":"MOSuite development version 0.0.0.9000","text":"intro visualization memory","code":""}]
